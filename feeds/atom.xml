<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andia</title><link href="https://andiaq.github.io/" rel="alternate"></link><link href="https://andiaq.github.io/feeds/atom.xml" rel="self"></link><id>https://andiaq.github.io/</id><updated>2017-03-17T10:29:00+08:00</updated><subtitle>拒绝熊猫眼。</subtitle><entry><title>OpenStack环境虚拟机打快照分析</title><link href="https://andiaq.github.io/articles/create-snapshots.html" rel="alternate"></link><published>2017-03-17T10:29:00+08:00</published><updated>2017-03-17T10:29:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2017-03-17:/articles/create-snapshots.html</id><summary type="html">&lt;p&gt;本文主要分析OpenStack N版本中给虚拟机打快照的具体实现方式。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usage: nova image-create &lt;span class="o"&gt;[&lt;/span&gt;--metadata &amp;lt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;value&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
                         &lt;span class="o"&gt;[&lt;/span&gt;--show&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--poll&lt;span class="o"&gt;]&lt;/span&gt;
                         &amp;lt;server&amp;gt; &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;从volume启动的虚拟机，可以对[ACTIVE, STOPPED, SUSPEND]虚拟机进行快照操作。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nova-api接收到请求之后，首先会从nova数据库中获取instance_system_metadata表中image metadata properties.删除不能被继承的properties(通过&lt;code&gt;non_inheritable_image_properties&lt;/code&gt;参数配置)。在获取虚拟机的image properties之后，nova-api只会先生成一个类似只有image properties（比如block device mapping, kernel and ramdisk IDs)）的bucket,实际大小设置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果虚拟机处于ACTIVE状态，会通过发送异步RPC调用nova-compute，然后调用libvirt对虚拟机执行quiesce操作来静默文件系统，禁止磁盘继续读写，从而保证磁盘快照的一致性（执行该操作需要安装qemu-guest-agent）。在quiesce之后，获取虚拟机上挂载的所有磁盘，包括根磁盘，调用cinder-api依次对这些volume卷进行打快照 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;本文主要分析OpenStack N版本中给虚拟机打快照的具体实现方式。&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usage: nova image-create &lt;span class="o"&gt;[&lt;/span&gt;--metadata &amp;lt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;value&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
                         &lt;span class="o"&gt;[&lt;/span&gt;--show&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--poll&lt;span class="o"&gt;]&lt;/span&gt;
                         &amp;lt;server&amp;gt; &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;从volume启动的虚拟机，可以对[ACTIVE, STOPPED, SUSPEND]虚拟机进行快照操作。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nova-api接收到请求之后，首先会从nova数据库中获取instance_system_metadata表中image metadata properties.删除不能被继承的properties(通过&lt;code&gt;non_inheritable_image_properties&lt;/code&gt;参数配置)。在获取虚拟机的image properties之后，nova-api只会先生成一个类似只有image properties（比如block device mapping, kernel and ramdisk IDs)）的bucket,实际大小设置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果虚拟机处于ACTIVE状态，会通过发送异步RPC调用nova-compute，然后调用libvirt对虚拟机执行quiesce操作来静默文件系统，禁止磁盘继续读写，从而保证磁盘快照的一致性（执行该操作需要安装qemu-guest-agent）。在quiesce之后，获取虚拟机上挂载的所有磁盘，包括根磁盘，调用cinder-api依次对这些volume卷进行打快照（但是nova-api只会获取这些volume snapshot的id信息，然后更新到meta）。对磁盘打完快照之后，执行unquiesce进行解冻。并将卷快照的信息更新保存到instance_system_metadata表的&lt;code&gt;block_device_mapping&lt;/code&gt;参数中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，nova-api所做的操作都是为了最后能获取虚拟机更新后的新image-meta数据，并没有执行创建工作。&lt;/p&gt;
&lt;p&gt;对虚拟机执行quiesce操作的测试如下：&lt;/p&gt;
&lt;p&gt;1）对虚拟机注入循环执行程序，该程序实现向另外一个文件持续写入时间戳。
   &lt;code&gt;[root@jenkins test]# tailf quiesce.log
   1489632992.9
   1489632993.91
   1489632994.91&lt;/code&gt;
   2）在虚拟机所在的宿主机上执行以下命令：
   &lt;code&gt;$ virsh qemu-agent-command instance-0003abaf '{"execute":"guest-fsfreeze-freeze"}'
   {"return":2}
   查看quiesce状态：
   $ virsh qemu-agent-command instance-0003abaf '{"execute":"guest-fsfreeze-status"}'
   {"return":"frozen"}&lt;/code&gt;
   3）等待一会儿之后，将虚拟机解冻，查看日志。
   &lt;code&gt;$ virsh qemu-agent-command instance-0003abaf '{"execute":"guest-fsfreeze-thaw"}'
   {"return":2}
   $ virsh qemu-agent-command instance-0003abaf '{"execute":"guest-fsfreeze-status"}'
   {"return":"thawed"}
   [root@jenkins test]# tailf quiesce.log
   1489632991.9
   1489632992.9
   1489632993.91
   1489632994.91
   1489633427.07
   1489633428.07
   1489633429.07
   1489633430.07
   1489633431.07
   1489633432.07
   1489633433.08&lt;/code&gt;
   通过以上结果可以发现，在对虚拟机执行quiesce之后，虚拟机确实不再写入文件，thaw之后，虚拟机继续写入文件。达到预期结果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nova-api在获取新image-meta元数据之后，会向glance-api发送create信息。glance-api根据传过来的instance和image-meta信息创建快照镜像。所以glance创建的快照镜像中只会保存volume snapshot信息到&lt;code&gt;block_device_mapping&lt;/code&gt;，镜像中不会存在磁盘数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova image-create f0d1455f-5079-4ffd-b954-0762159e9793 wei-v1-snap&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cinder snapshot-list&lt;/span&gt;
+--------------------------------------+--------------------------------------+-----------+--------------------------+------+
&lt;span class="p"&gt;|&lt;/span&gt; ID                                   &lt;span class="p"&gt;|&lt;/span&gt; Volume ID                            &lt;span class="p"&gt;|&lt;/span&gt; Status    &lt;span class="p"&gt;|&lt;/span&gt; Name                     &lt;span class="p"&gt;|&lt;/span&gt; Size &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+--------------------------------------+-----------+--------------------------+------+
&lt;span class="p"&gt;|&lt;/span&gt; 5e33cc09-01d8-423f-be26-ad1f44b6689e &lt;span class="p"&gt;|&lt;/span&gt; 2495add5-969b-4b4c-97c2-f7a2c378431e &lt;span class="p"&gt;|&lt;/span&gt; available &lt;span class="p"&gt;|&lt;/span&gt; snapshot &lt;span class="k"&gt;for&lt;/span&gt; wei-v1-snap &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; fd284012-7771-42af-92a0-949569ad527b &lt;span class="p"&gt;|&lt;/span&gt; 174495f0-bf09-49c9-ba8a-b1603f75db68 &lt;span class="p"&gt;|&lt;/span&gt; available &lt;span class="p"&gt;|&lt;/span&gt; snapshot &lt;span class="k"&gt;for&lt;/span&gt; wei-v1-snap &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+--------------------------------------+-----------+--------------------------+------+

&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# glance image-show 9d1c6596-4b5c-49a9-87a6-51603460aeed&lt;/span&gt;
+----------------------+----------------------------------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Property             &lt;span class="p"&gt;|&lt;/span&gt; Value                                                                            &lt;span class="p"&gt;|&lt;/span&gt;
+----------------------+----------------------------------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; base_image_ref       &lt;span class="p"&gt;|&lt;/span&gt;                                                                                  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; bdm_v2               &lt;span class="p"&gt;|&lt;/span&gt; True                                                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; block_device_mapping &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;guest_format&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;boot_index&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;delete_on_termination&amp;quot;&lt;/span&gt;: false,         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no_device&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;snapshot_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;fd284012-7771-42af-92a0-949569ad527b&amp;quot;&lt;/span&gt;,        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;device_name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/dev/vda&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;disk_bus&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;virtio&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;image_id&amp;quot;&lt;/span&gt;: null,               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source_type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;snapshot&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;disk&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;volume_id&amp;quot;&lt;/span&gt;:      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; null, &lt;span class="s2"&gt;&amp;quot;destination_type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;volume&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;volume_size&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;guest_format&amp;quot;&lt;/span&gt;: null,   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boot_index&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;delete_on_termination&amp;quot;&lt;/span&gt;: false, &lt;span class="s2"&gt;&amp;quot;no_device&amp;quot;&lt;/span&gt;: null,           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;snapshot_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5e33cc09-01d8-423f-be26-ad1f44b6689e&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;device_name&amp;quot;&lt;/span&gt;:            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/dev/vdb&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;disk_bus&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;image_id&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;source_type&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;snapshot&amp;quot;&lt;/span&gt;,       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;volume_id&amp;quot;&lt;/span&gt;: null, &lt;span class="s2"&gt;&amp;quot;destination_type&amp;quot;&lt;/span&gt;:         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;volume&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;volume_size&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;                                                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; checksum             &lt;span class="p"&gt;|&lt;/span&gt; d41d8cd98f00b204e9800998ecf8427e                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; container_format     &lt;span class="p"&gt;|&lt;/span&gt; bare                                                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; created_at           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;-03-12T12:04:57Z                                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; disk_format          &lt;span class="p"&gt;|&lt;/span&gt; qcow2                                                                            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; id                   &lt;span class="p"&gt;|&lt;/span&gt; 9d1c6596-4b5c-49a9-87a6-51603460aeed                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; locations            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;rbd://cdd3749c-df0d-40f6-a178-78ae91517dfa/openstack-00/9d1c6596-4b5c- |&lt;/span&gt;
&lt;span class="s2"&gt;|                      | 49a9-87a6-51603460aeed/snap&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{}}]&lt;/span&gt;                                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; min_disk             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;                                                                               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; min_ram              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;                                                                              &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; name                 &lt;span class="p"&gt;|&lt;/span&gt; wei-v1-snap                                                                      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; owner                &lt;span class="p"&gt;|&lt;/span&gt; 08c8707bb8134e6d8eff730fac326b87                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; protected            &lt;span class="p"&gt;|&lt;/span&gt; False                                                                            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; root_device_name     &lt;span class="p"&gt;|&lt;/span&gt; /dev/vda                                                                         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; size                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;                                                                                &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; status               &lt;span class="p"&gt;|&lt;/span&gt; active                                                                           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; tags                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;                                                                               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; updated_at           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;-03-12T12:04:57Z                                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; virtual_size         &lt;span class="p"&gt;|&lt;/span&gt; None                                                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; visibility           &lt;span class="p"&gt;|&lt;/span&gt; private                                                                          &lt;span class="p"&gt;|&lt;/span&gt;
+----------------------+----------------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;从镜像启动的虚拟机，可以对[ACTIVE, STOPPED, PAUSED, SUSPEND]状态的虚拟机进行快照操作。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于从镜像启动的虚拟机，同样会在创建快照之前，清除&lt;code&gt;instance_system_metadata&lt;/code&gt;数据表中的&lt;code&gt;disk_format&lt;/code&gt;和&lt;code&gt;container_format&lt;/code&gt;参数，因为新创建的镜像可能会变成其他的格式，待镜像上传之后会给这些参数填充正确的值。其次删除不能被继承的properties。但依然可以通过在执行&lt;code&gt;nova image-create $INSTANCE_ID&lt;/code&gt;时添加&lt;code&gt;--metadata &amp;lt;key=value&amp;gt;&lt;/code&gt;参数来添加新的metadata。最终获取虚拟机最新的image-meta。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nova-api在获取新image-meta元数据之后，会向glance-api发送create信息。glance-api根据传过来的instance和image-meta信息创建快照镜像。并返回镜像对象的image_meta给nova-api。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nova-api在拿到镜像对象的image-meta之后，然后发送异步RPC调用虚拟机所在宿主机上的nova-compute服务，再由libvirt调用snapshot接口（要求qemu版本在0.14及以上）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 具有LVM encrypted 临时存储的虚拟机需要冷快照。但目前检查加密是多余的，因为LVM仅支持冷快照。
2. 关机状态的虚拟机只能进行冷快照。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;live_snapshot需满足的条件：
1. hypervisor type一致。
2. image source type不是lvm;
3. nova.conf中&lt;code&gt;ephemeral_storage_encryption&lt;/code&gt;中enabled=False;
4. nova.conf中&lt;code&gt;workarounds&lt;/code&gt;中disable_libvirt_livesnapshot=False;&lt;/p&gt;
&lt;p&gt;如果满足以上条件，还需要对虚拟机的磁盘guest.get_block_device(disk_path).abort_job()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;live_snapshot&lt;/code&gt;和&lt;code&gt;cold_snapshot&lt;/code&gt;的区别与联系：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;
1. live_snapshot需满足一系列条件。
2. 对cold_snapshot来说，如果virt_type不为lxc，电源状态处于[RUNNING, PAUSED]的虚拟机会被suspend，将虚拟机内存中的信息保存到磁盘上。待虚拟机快照创建完成并上传到glance之后，再根据其xml文件开启虚拟机。
3. live_snapshot不会对虚拟机执行suspend。但在创建在线快照之前会终止根磁盘上所有任务（同时确认虚拟机处于RUNNING状态）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联系：&lt;/strong&gt;
1. live_snapshot与cold_snapshot创建快照的流程相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;live_snapshot/cold_snapshot (rbd-backend)的创建流程：&lt;/strong&gt;
1. 由于nova并不知glance是如何配置来存储image的，所以会获取虚拟机镜像所在的pool；
2. 对虚拟机根磁盘进行打快照(即创建rbd快照)并设置该快照为保护状态；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bj&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;withlvm&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;openstack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a1e1b85&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eacb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b5c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;93f&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;c12c8d0_disk&lt;/span&gt;&lt;span class="mf"&gt;@47e07&lt;/span&gt;&lt;span class="n"&gt;a6c6f4d42b3817cae614493992d&lt;/span&gt;
&lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a1e1b85&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eacb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b5c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;93f&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;c12c8d0_disk&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;20480&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;5120&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;
    &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nl"&gt;block_name_prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rbd_data&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="n"&gt;ea72ae8944a&lt;/span&gt;
    &lt;span class="nl"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nl"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layering&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;
    &lt;span class="nl"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nl"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;将上面创建的快照clone到虚拟机镜像所在的pool；&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bj&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;withlvm&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;openstack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c4b3058&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;483&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b7e2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20274&lt;/span&gt;&lt;span class="n"&gt;df984d9&lt;/span&gt;
&lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c4b3058&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;483&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b7e2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20274&lt;/span&gt;&lt;span class="n"&gt;df984d9&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;20480&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;5120&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;
    &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nl"&gt;block_name_prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rbd_data&lt;/span&gt;&lt;span class="mf"&gt;.953&lt;/span&gt;&lt;span class="n"&gt;d4e89a492&lt;/span&gt;
    &lt;span class="nl"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nl"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layering&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;
    &lt;span class="nl"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nl"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;openstack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;a1e1b85&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eacb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;b5c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;93f&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;c12c8d0_disk&lt;/span&gt;&lt;span class="mf"&gt;@47e07&lt;/span&gt;&lt;span class="n"&gt;a6c6f4d42b3817cae614493992d&lt;/span&gt;
    &lt;span class="nl"&gt;overlap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20480&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;对快照进行flatten操作，让其与它的parent解除关联；&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@compute-bj-2-withlvm ~]# rbd info openstack-00/3c4b3058-0f58-483c-b7e2-20274df984d9
rbd image &amp;#39;3c4b3058-0f58-483c-b7e2-20274df984d9&amp;#39;:
    size 20480 MB in 5120 objects
    order 22 (4096 kB objects)
    block_name_prefix: rbd_data.953d4e89a492
    format: 2
    features: layering, exclusive-lock, object-map, fast-diff, deep-flatten
    flags: 
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;将快照（此时已经成为image）的parent删除(即删除&lt;code&gt;openstack-00/6a1e1b85-eacb-401b-9b5c-93f59c12c8d0_disk@47e07a6c6f4d42b3817cae614493992d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;对以上生成的image创建受保护的快照&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@compute-bj-2-withlvm ~]# rbd info openstack-00/3c4b3058-0f58-483c-b7e2-20274df984d9@snap
rbd image &amp;#39;3c4b3058-0f58-483c-b7e2-20274df984d9&amp;#39;:
    size 20480 MB in 5120 objects
    order 22 (4096 kB objects)
    block_name_prefix: rbd_data.953d4e89a492
    format: 2
    features: layering, exclusive-lock, object-map, fast-diff, deep-flatten
    flags: 
    protected: True
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;更新image信息，上传到glance成功。
&lt;code&gt;{'status': 'active', 'name': u'wei-image-snap', 'container_format': u'bare', 'disk_format': 'raw', 'location': u'rbd://cdd3749c-df0d-40f6-a178-78ae91517dfa/openstack-00/3c4b3058-0f58-483c-b7e2-20274df984d9/snap', 'is_public': False, '}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从image创建的虚拟机&lt;/p&gt;
&lt;p&gt;只会对根磁盘打快照。如果要基于该快照做rebuild操作时，需要先将源虚拟机上挂载的volume卷卸载掉，再重新挂载到rebuild之后的虚拟机上。
根据以上分析，快照之后生成的image已经与其parent解除关联，所以源虚拟机是可以删除的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从volume创建的虚拟机&lt;/p&gt;
&lt;p&gt;会调用cinder对所有的volume卷（根磁盘和所有数据盘）打快照。
源虚拟机也是可以删除的。rebuild操作会获取快照中的block_device_mapping信息，重新创建虚拟机并挂载数据盘。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Availability Zones 及 Host Aggregate</title><link href="https://andiaq.github.io/articles/ha-az.html" rel="alternate"></link><published>2017-03-13T18:30:00+08:00</published><updated>2017-03-13T18:30:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2017-03-13:/articles/ha-az.html</id><summary type="html">&lt;h2&gt;Availability zones&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Availability zones&lt;/code&gt;和&lt;code&gt;host aggregates&lt;/code&gt;是在region和cell基础上提出的进一步的划分（segregation）概念。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Availability zone&lt;/code&gt;致力于通过逻辑划分提供某种形式上的物理隔离。也就是说，通过位置可用性来将服务器进行逻辑上的分组。用户可以某些可用性上的区别来指定az，从而选择所起虚拟机的“位置”。&lt;/p&gt;
&lt;p&gt;一般对于规模较大的集群比如跨数据中心，可以根据地理位置来定义az。比如：bj，sh。或是同一数据中心的不同机房，或是在同一机房的几个相邻的机架，同样可以通过位置来定义，从而保证不同az之间具有某些特性上的冗余性，比如供电系统、网络设备等。而不影响其他的 Availability Zones 上节点运行的虚拟机，通过这种划分来提高 OpenStack 的可用性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Host Aggregates&lt;/code&gt; 是在 &lt;code&gt;Availability Zones&lt;/code&gt; 的基础上更进一步地进行逻辑的分组和隔离。例如我们可以根据不同的 computes 节点的物理硬件配置将具有相同共性的物理资源规划在同一 &lt;code&gt;Host Aggregate&lt;/code&gt; 之下，或者根据用户的具体需求将几个 computes …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Availability zones&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Availability zones&lt;/code&gt;和&lt;code&gt;host aggregates&lt;/code&gt;是在region和cell基础上提出的进一步的划分（segregation）概念。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Availability zone&lt;/code&gt;致力于通过逻辑划分提供某种形式上的物理隔离。也就是说，通过位置可用性来将服务器进行逻辑上的分组。用户可以某些可用性上的区别来指定az，从而选择所起虚拟机的“位置”。&lt;/p&gt;
&lt;p&gt;一般对于规模较大的集群比如跨数据中心，可以根据地理位置来定义az。比如：bj，sh。或是同一数据中心的不同机房，或是在同一机房的几个相邻的机架，同样可以通过位置来定义，从而保证不同az之间具有某些特性上的冗余性，比如供电系统、网络设备等。而不影响其他的 Availability Zones 上节点运行的虚拟机，通过这种划分来提高 OpenStack 的可用性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Host Aggregates&lt;/code&gt; 是在 &lt;code&gt;Availability Zones&lt;/code&gt; 的基础上更进一步地进行逻辑的分组和隔离。例如我们可以根据不同的 computes 节点的物理硬件配置将具有相同共性的物理资源规划在同一 &lt;code&gt;Host Aggregate&lt;/code&gt; 之下，或者根据用户的具体需求将几个 computes 节点规划在具有相同用途的同一 &lt;code&gt;Host Aggregate&lt;/code&gt; 之下，通过这样的划分有利于提高 OpenStack 资源的使用效率。&lt;code&gt;Host Aggregates&lt;/code&gt; 可以通过 nova client 或 API 来创建和配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图 1.Availability Zones 与 Host Aggregates 的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/hz_az.png"&gt;&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;我们可以通过对 nova.conf 文件的配置来定义不同的 Availability zones。相关配置项为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;internal_service_availability_zone&lt;/code&gt;（定义services的az，默认为internal）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_availability_zone&lt;/code&gt; (定义计算节点的az，默认为nova)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上配置在nova-api节点设置，且未配置主机聚合时，可以作为默认&lt;code&gt;availability_zone&lt;/code&gt;。计算节点都将会在这个默认&lt;code&gt;availability_zone&lt;/code&gt;下。&lt;/p&gt;
&lt;h2&gt;用法&lt;/h2&gt;
&lt;p&gt;与availability_zone相关的filter：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Filter名&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AvailabilityZoneFilter&lt;/td&gt;
&lt;td&gt;筛选出指定availability_zone中的宿主机&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;基于&lt;code&gt;availability_zone&lt;/code&gt;筛选宿主机需要在&lt;code&gt;nova-scheduler&lt;/code&gt;节点的&lt;code&gt;nova.conf&lt;/code&gt;文件配置项&lt;code&gt;scheduler_default_filters&lt;/code&gt;后面添加&lt;code&gt;AvailabilityZoneFilter&lt;/code&gt;，然后重启&lt;code&gt;openstack-nova-scheduler&lt;/code&gt;服务才能生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令行方式：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nova boot --flavor 1 --image e875ac34-2031-4265-890d-f6ed1968dfc7 --nic net-id=38bf1bcf-8119-49bd-ae6f-76995cb13d1f --availability-zone bj test-wei
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;面板方式：&lt;/strong&gt;
&lt;img alt="image" src="../images/az2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Host Aggregate&lt;/h2&gt;
&lt;p&gt;从具体实现上来看，&lt;code&gt;Host aggregate&lt;/code&gt;指一组拥有关联metadata的计算节点，metadata中描述了该组计算节点所拥有的特性，比如高速网卡、GPU、SSD存储、属于特定租户、Qos等。也就是说，Host Aggregate被设计用于按能力对服务器进行分组。这些能力，通过metadata自定义。&lt;code&gt;nova-scheduler&lt;/code&gt;能够过滤不满足某些特性的主机，从而只选择只具备某些特性的主机，比如只选择配置ssd的主机或者只选择具有GPU加速的主机等。&lt;/p&gt;
&lt;p&gt;所有的&lt;code&gt;nova availability zones&lt;/code&gt;的部署都是基于&lt;code&gt;host aggregate&lt;/code&gt;实现的（尽管不是所有的宿主机聚合都叫可用区域）。&lt;/p&gt;
&lt;p&gt;Nova没有提供创建&lt;code&gt;availability_zone&lt;/code&gt;的CLI，只能通过创建&lt;code&gt;host-aggregate&lt;/code&gt;时同时创建&lt;code&gt;availability_zone&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;usage: &lt;code&gt;nova aggregate-create &amp;lt;name&amp;gt; [&amp;lt;availability-zone&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-create hz3 AZ3&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata                &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz3  &lt;span class="p"&gt;|&lt;/span&gt; AZ3               &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=AZ3&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="s1"&gt;&amp;#39;nova aggregate-create hz3 AZ3&amp;#39;&lt;/span&gt;命令等效于创建host aggregate，然后设置元数据：
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-create hz4&lt;/span&gt;
+----+------+-------------------+-------+----------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+----------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz4  &lt;span class="p"&gt;|&lt;/span&gt; -                 &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+----------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-set-metadata hz4 availability_zone=AZ4&lt;/span&gt;
Metadata has been successfully updated &lt;span class="k"&gt;for&lt;/span&gt; aggregate &lt;span class="m"&gt;5&lt;/span&gt;.
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata                &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz4  &lt;span class="p"&gt;|&lt;/span&gt; AZ4               &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=AZ4&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
当我们添加新节点到这个host aggregate的时，计算节点会自动被划分到该availability_zone或者具体相同特性的组。但是Nova不允许将计算节点添加到有冲突的availbility_zone。
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-show hz1&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts                                                              &lt;span class="p"&gt;|&lt;/span&gt; Metadata               &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz1  &lt;span class="p"&gt;|&lt;/span&gt; bj                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compute-bj-1-withlvm.novalocal&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;compute-bj-2-withlvm.novalocal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=bj&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-show hz4&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata                &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz4  &lt;span class="p"&gt;|&lt;/span&gt; AZ4               &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=AZ4&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+-------+-------------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-add-host hz1 compute-bj-1-withlvm.novalocal&lt;/span&gt;
ERROR &lt;span class="o"&gt;(&lt;/span&gt;Conflict&lt;span class="o"&gt;)&lt;/span&gt;: Aggregate &lt;span class="m"&gt;1&lt;/span&gt; already has host compute-bj-1-withlvm.novalocal. &lt;span class="o"&gt;(&lt;/span&gt;HTTP &lt;span class="m"&gt;409&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Request-ID: req-ec05903d-5db6-4b50-bb25-0dba2eb9b7d5&lt;span class="o"&gt;)&lt;/span&gt;
一个host可以属于多个host aggregates，但只能属于一个az。实际部署中，只要availability_zone不冲突，Nova允许将计算节点分配给具有不同metadata的不同host aggregate。如下：
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-show hz1&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts                                                              &lt;span class="p"&gt;|&lt;/span&gt; Metadata               &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz1  &lt;span class="p"&gt;|&lt;/span&gt; bj                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compute-bj-1-withlvm.novalocal&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;compute-bj-2-withlvm.novalocal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=bj&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+--------------------------------------------------------------------+------------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-add-host hz3 compute-bj-1-withlvm.novalocal&lt;/span&gt;
Host compute-bj-1-withlvm.novalocal has been successfully added &lt;span class="k"&gt;for&lt;/span&gt; aggregate &lt;span class="m"&gt;6&lt;/span&gt;
+----+------+-------------------+----------------------------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts                            &lt;span class="p"&gt;|&lt;/span&gt; Metadata   &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+----------------------------------+------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; hz3  &lt;span class="p"&gt;|&lt;/span&gt; -                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compute-bj-1-withlvm.novalocal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssd=true&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+------+-------------------+----------------------------------+------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，AZ对于用户可见，而&lt;code&gt;Host aggregate&lt;/code&gt;对于用户并不可见；用户通过选择具有某种特性的flavor，从而间接选择具有该特性的&lt;code&gt;host aggregate&lt;/code&gt;。&lt;code&gt;nova-scheduler&lt;/code&gt;调度时会读取Flavor的extra specs，并与主机集合的metadata匹配，不匹配的将被过滤掉，不会被最终选择作为候选主机。&lt;/p&gt;
&lt;p&gt;Flavor内置支持很多extra specs，通过extra specs，可以指定虚拟机的CPU拓扑、QoS限制、CPU pinning策略、NUMA拓扑，甚至设置PCI passthrough，详细介绍参考官方文档。比如设置CPU topology，可以设置CPU的socket数量、core数量以及超线程数量等 。当然也可以给flavor自定义extra specs，只要与host aggregate的metadata相同即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nova flavor-key FLAVOR-NAME &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_sockets&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-SOCKETS &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_cores&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-CORES &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_threads&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-THREADS &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_max_sockets&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-SOCKETS &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_max_cores&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-CORES &lt;span class="se"&gt;\&lt;/span&gt;
    hw:cpu_max_threads&lt;span class="o"&gt;=&lt;/span&gt;FLAVOR-THREADS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据实际的物理资源在 OpenStack 环境中创建 &lt;code&gt;Host Aggregates&lt;/code&gt;
我们需要设置tiny flavor的key与aggregate的metadata相同，然后选择该flavor创建虚拟机，测试是否会调度该&lt;code&gt;host aggregate&lt;/code&gt;下面的计算节点。&lt;/p&gt;
&lt;p&gt;要注意的是，这种方式筛选宿主机需要在&lt;code&gt;nova-scheduler&lt;/code&gt;节点的nova.conf文件配置项&lt;code&gt;scheduler_default_filters&lt;/code&gt;后面添加&lt;code&gt;AggregateInstanceExtraSpecsFilter&lt;/code&gt;，然后重启&lt;code&gt;openstack-nova-scheduler&lt;/code&gt;服务才能生效。&lt;/p&gt;
&lt;p&gt;测试如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-create high-memory-agg high-memory-az&lt;/span&gt;
+----+-----------------+-------------------+-------+------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name            &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata                           &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+-------+------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; high-memory-agg &lt;span class="p"&gt;|&lt;/span&gt; high-memory-az    &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;availability_zone=high-memory-az&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+-------+------------------------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-set-metadata high-memory-agg HW=high-memory&lt;/span&gt;
Metadata has been successfully updated &lt;span class="k"&gt;for&lt;/span&gt; aggregate &lt;span class="m"&gt;7&lt;/span&gt;.
+----+-----------------+-------------------+-------+------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name            &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts &lt;span class="p"&gt;|&lt;/span&gt; Metadata                                             &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+-------+------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; high-memory-agg &lt;span class="p"&gt;|&lt;/span&gt; high-memory-az    &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HW=high-memory&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;availability_zone=high-memory-az&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+-------+------------------------------------------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova flavor-key  1 set HW=high-memory&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova flavor-show 1&lt;/span&gt;
+----------------------------+-----------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Property                   &lt;span class="p"&gt;|&lt;/span&gt; Value                 &lt;span class="p"&gt;|&lt;/span&gt;
+----------------------------+-----------------------+
&lt;span class="p"&gt;|&lt;/span&gt; OS-FLV-DISABLED:disabled   &lt;span class="p"&gt;|&lt;/span&gt; False                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-FLV-EXT-DATA:ephemeral  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; disk                       &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;                    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; extra_specs                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HW&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;high-memory&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; id                         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; name                       &lt;span class="p"&gt;|&lt;/span&gt; tiny                  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; os-flavor-access:is_public &lt;span class="p"&gt;|&lt;/span&gt; True                  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; ram                        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt;                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; rxtx_factor                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.0                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; swap                       &lt;span class="p"&gt;|&lt;/span&gt;                       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; vcpus                      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;                     &lt;span class="p"&gt;|&lt;/span&gt;
+----------------------------+-----------------------+
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova aggregate-add-host high-memory-agg  compute-bj-1-withlvm.novalocal&lt;/span&gt;
Host compute-bj-1-withlvm.novalocal has been successfully added &lt;span class="k"&gt;for&lt;/span&gt; aggregate &lt;span class="m"&gt;7&lt;/span&gt;
+----+-----------------+-------------------+----------------------------------+------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Id &lt;span class="p"&gt;|&lt;/span&gt; Name            &lt;span class="p"&gt;|&lt;/span&gt; Availability Zone &lt;span class="p"&gt;|&lt;/span&gt; Hosts                            &lt;span class="p"&gt;|&lt;/span&gt; Metadata                                             &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+----------------------------------+------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; high-memory-agg &lt;span class="p"&gt;|&lt;/span&gt; high-memory-az    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compute-bj-1-withlvm.novalocal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HW=high-memory&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;availability_zone=high-memory-az&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
+----+-----------------+-------------------+----------------------------------+------------------------------------------------------+

&lt;span class="o"&gt;[&lt;/span&gt;root@controller nova&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova boot --flavor 1 --image e875ac34-2031-4265-890d-f6ed1968dfc7 --nic net-id=38bf1bcf-8119-49bd-ae6f-76995cb13d1f test-wei&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@controller ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# nova show 4869650b-4dd6-48fe-820e-8ac59dbf3c59&lt;/span&gt;
+--------------------------------------+----------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; Property                             &lt;span class="p"&gt;|&lt;/span&gt; Value                                                    &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+----------------------------------------------------------+
&lt;span class="p"&gt;|&lt;/span&gt; OS-DCF:diskConfig                    &lt;span class="p"&gt;|&lt;/span&gt; MANUAL                                                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-AZ:availability_zone          &lt;span class="p"&gt;|&lt;/span&gt; high-memory-az                                           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:host                 &lt;span class="p"&gt;|&lt;/span&gt; compute-bj-1-withlvm.novalocal                           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:hostname             &lt;span class="p"&gt;|&lt;/span&gt; test-wei                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:hypervisor_hostname  &lt;span class="p"&gt;|&lt;/span&gt; compute-bj-1-withlvm.novalocal                           &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:instance_name        &lt;span class="p"&gt;|&lt;/span&gt; instance-0000002c                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:kernel_id            &lt;span class="p"&gt;|&lt;/span&gt;                                                          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:launch_index         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:ramdisk_id           &lt;span class="p"&gt;|&lt;/span&gt;                                                          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:reservation_id       &lt;span class="p"&gt;|&lt;/span&gt; r-9t3kqglu                                               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:root_device_name     &lt;span class="p"&gt;|&lt;/span&gt; /dev/vda                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-SRV-ATTR:user_data            &lt;span class="p"&gt;|&lt;/span&gt; -                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-STS:power_state               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-STS:task_state                &lt;span class="p"&gt;|&lt;/span&gt; -                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-EXT-STS:vm_state                  &lt;span class="p"&gt;|&lt;/span&gt; active                                                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-SRV-USG:launched_at               &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;-03-09T02:43:34.000000                               &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; OS-SRV-USG:terminated_at             &lt;span class="p"&gt;|&lt;/span&gt; -                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; accessIPv4                           &lt;span class="p"&gt;|&lt;/span&gt;                                                          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; accessIPv6                           &lt;span class="p"&gt;|&lt;/span&gt;                                                          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; config_drive                         &lt;span class="p"&gt;|&lt;/span&gt;                                                          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; created                              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;-03-09T02:43:27Z                                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; description                          &lt;span class="p"&gt;|&lt;/span&gt; -                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; flavor                               &lt;span class="p"&gt;|&lt;/span&gt; tiny &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; hebin-test network                   &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;172&lt;/span&gt;.16.98.13                                             &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; hostId                               &lt;span class="p"&gt;|&lt;/span&gt; 29624d4fab8a27da27dfc97646bf1ac0080647f48de7e8603d6e9d5b &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; host_status                          &lt;span class="p"&gt;|&lt;/span&gt; UP                                                       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; id                                   &lt;span class="p"&gt;|&lt;/span&gt; 4869650b-4dd6-48fe-820e-8ac59dbf3c59                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; image                                &lt;span class="p"&gt;|&lt;/span&gt; cirros &lt;span class="o"&gt;(&lt;/span&gt;e875ac34-2031-4265-890d-f6ed1968dfc7&lt;span class="o"&gt;)&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; key_name                             &lt;span class="p"&gt;|&lt;/span&gt; -                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; locked                               &lt;span class="p"&gt;|&lt;/span&gt; False                                                    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; metadata                             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;                                                       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; name                                 &lt;span class="p"&gt;|&lt;/span&gt; test-wei                                                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; os-extended-volumes:volumes_attached &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;                                                       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; progress                             &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;                                                        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; security_groups                      &lt;span class="p"&gt;|&lt;/span&gt; default                                                  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; status                               &lt;span class="p"&gt;|&lt;/span&gt; ACTIVE                                                   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; tags                                 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;                                                       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; tenant_id                            &lt;span class="p"&gt;|&lt;/span&gt; 08c8707bb8134e6d8eff730fac326b87                         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; updated                              &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;-03-09T02:43:35Z                                     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; user_id                              &lt;span class="p"&gt;|&lt;/span&gt; 7418921e19a4406caee18bd8ad08bf92                         &lt;span class="p"&gt;|&lt;/span&gt;
+--------------------------------------+----------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到虚拟机被成功调度到&lt;code&gt;high-memory-az&lt;/code&gt;可用域中的&lt;code&gt;compute-bj-1-withlvm.novalocal&lt;/code&gt;节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于主机特性相关的Filter：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Filter名&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AggregateImagePropertiesIsolation&lt;/td&gt;
&lt;td&gt;筛选出对应aggregate满足image属性的宿主机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateInstanceExtraSpecsFilter&lt;/td&gt;
&lt;td&gt;筛选出对应aggregate满足flavor的附加参数的宿主机，非常灵活的filter，可以用来根据主机的某些物理特性进行筛选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateMultiTenancyIsolation&lt;/td&gt;
&lt;td&gt;将特定租户的虚拟机隔离在特定的aggregate中，绑定了aggregate且其aggregate只含有其他租户的宿主机将被过滤掉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateCoreFilter&lt;/td&gt;
&lt;td&gt;与CoreFilter类似，但是cpu_allocation_ratio从宿主机所在aggregate的metadata中获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateRamFilter&lt;/td&gt;
&lt;td&gt;与RamFilter类似，ram_allocation_ratio从宿主机所在aggregate的metadata中获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateCoreFilter&lt;/td&gt;
&lt;td&gt;与DiskFilter类似，disk_allocation_ratio从宿主机所在aggregate的metadata中获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateNumInstancesFilter&lt;/td&gt;
&lt;td&gt;与NumInstancesFilter类似，max_instances_per_host从宿主机所在aggregate的metadata中获取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AggregateIoOpsFilter&lt;/td&gt;
&lt;td&gt;与IoOpsFilter类似，max_io_ops_per_host从宿主机所在aggregate的metadata中获取&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据以上特性的Filter，我们就可以根据实际的用户需求在 OpenStack 环境中创建 &lt;code&gt;Host Aggregates&lt;/code&gt;。
在具体使用 &lt;code&gt;Host Aggregates&lt;/code&gt; 机制来分配 computes 节点资源时，我们可以综合考虑目前 OpenStack 环境里的物理资源和用户需求来灵活地配置 &lt;code&gt;Host Aggregate&lt;/code&gt; 的 metadatas 以及 filters。由于一个 &lt;code&gt;Availability Zone&lt;/code&gt; 可以同时包含多个 &lt;code&gt;Host aggregates&lt;/code&gt;，每个 &lt;code&gt;Host aggregate&lt;/code&gt; 又有可能配置不同的 metadatas，因此我们在创建虚拟机时也应该注意这点，不要将虚拟机创建到错误的 compute 节点上。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;https://www.ibm.com/developerworks/cn/cloud/library/1604-openstack-host-aggregate/&lt;/li&gt;
&lt;li&gt;https://www.mirantis.com/blog/the-first-and-final-word-on-openstack-availability-zones/&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>linux 服务器架构</title><link href="https://andiaq.github.io/articles/linux-cpu-architecture.html" rel="alternate"></link><published>2017-03-13T18:00:00+08:00</published><updated>2017-03-13T18:00:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2017-03-13:/articles/linux-cpu-architecture.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;商用服务器的系统架构大致可以分为三类：&lt;/strong&gt;
&lt;code&gt;SMP&lt;/code&gt; &lt;code&gt;NUMA&lt;/code&gt; &lt;code&gt;MMP&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;SMP&lt;/h2&gt;
&lt;p&gt;SMP即&lt;code&gt;Symmetric Multi-Processor&lt;/code&gt;，对称多处理器架构。
所谓对称多处理器架构，是指服务器中的多个CPU对称工作，无主次和从属关系。各CPU共享相同的物理内存，每个CPU访问内存中的任何地址所需的时间都是相同的，因此SMP也被称为一致存储器访问结构。对SMP服务器进行扩展的方式包括：增加内存； 使用更快的CPU；增加CPU数量；扩充I/O(槽口数和总线数)；以及添加更多的外部设备(通常是磁盘存储)。&lt;/p&gt;
&lt;p&gt;SMP服务器的主要特征是共享，系统中的所有资源(CPU、内存、I/O等)都是共享的。也正是由于这种特征，导致了SMP服务器的主要问题，那就是它得扩展能力非常有限。&lt;/p&gt;
&lt;p&gt;对于SMP服务器而言，每一个共享的环节都可能造成SMP服务器扩展时的瓶颈，而最受限制的则是内存。由于每个CPU必须通过相同的内存总线访问相同的内存资源，因此随着CPU数量的增加，内存访问冲突将迅速增加，最终会造成CPU资源的浪费，使 CPU性能的有效性大大降低。实验证明，SMP服务器CPU利用率最好的情况是2至4个CPU。 &lt;/p&gt;
&lt;h2&gt;NUMA&lt;/h2&gt;
&lt;p&gt;NUMA即&lt;code&gt;Non-Uniform Memory Access …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;商用服务器的系统架构大致可以分为三类：&lt;/strong&gt;
&lt;code&gt;SMP&lt;/code&gt; &lt;code&gt;NUMA&lt;/code&gt; &lt;code&gt;MMP&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;SMP&lt;/h2&gt;
&lt;p&gt;SMP即&lt;code&gt;Symmetric Multi-Processor&lt;/code&gt;，对称多处理器架构。
所谓对称多处理器架构，是指服务器中的多个CPU对称工作，无主次和从属关系。各CPU共享相同的物理内存，每个CPU访问内存中的任何地址所需的时间都是相同的，因此SMP也被称为一致存储器访问结构。对SMP服务器进行扩展的方式包括：增加内存； 使用更快的CPU；增加CPU数量；扩充I/O(槽口数和总线数)；以及添加更多的外部设备(通常是磁盘存储)。&lt;/p&gt;
&lt;p&gt;SMP服务器的主要特征是共享，系统中的所有资源(CPU、内存、I/O等)都是共享的。也正是由于这种特征，导致了SMP服务器的主要问题，那就是它得扩展能力非常有限。&lt;/p&gt;
&lt;p&gt;对于SMP服务器而言，每一个共享的环节都可能造成SMP服务器扩展时的瓶颈，而最受限制的则是内存。由于每个CPU必须通过相同的内存总线访问相同的内存资源，因此随着CPU数量的增加，内存访问冲突将迅速增加，最终会造成CPU资源的浪费，使 CPU性能的有效性大大降低。实验证明，SMP服务器CPU利用率最好的情况是2至4个CPU。 &lt;/p&gt;
&lt;h2&gt;NUMA&lt;/h2&gt;
&lt;p&gt;NUMA即&lt;code&gt;Non-Uniform Memory Access&lt;/code&gt;，非一致性内存架构。
NUMA架构产生的原因之一，就是为了解决SMP在扩展能力上的限制。利用NUMA技术，可以把几十个CPU(甚至上百个CPU)组合在一个服务器内。其CPU模块结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/numa_cpu.png"&gt;&lt;/p&gt;
&lt;p&gt;NUMA服务器的基本特征是具有多个CPU模块，每个CPU模块由多个CPU(如4个)组成，并且具有独立的本地内存、I/O槽口等。由于其节点之间可以通过互联模块(如称为Crossbar Switch)进行连接和信息交互，因此每个CPU可以访问整个系统的内存(这是NUMA系统与MPP系统的重要差别)。显然，访问本地内存的速度将远远高于访问远地内存(系统内其它节点的内存)的速度，这也是非一致存储访问NUMA的由来。由于这个特点，为了更好地发挥系统性能，开发应用程序时需要尽量减少不同CPU模块之间的信息交互。利用NUMA技术，可以较好地解决原来SMP系统的扩展问题，在一个物理服务器内可以支持上百个CPU。比较典型的NUMA服务器的例子包括HP的Superdome、SUN15K、IBMp690等。&lt;/p&gt;
&lt;p&gt;但NUMA技术同样有一定缺陷，由于访问远地内存的延时远远超过本地内存，因此当CPU数量增加时，系统性能无法线性增加。如HP公司发布Superdome服务器时，曾公布了它与HP其它UNIX服务器的相对性能值，结果发现，64路CPU的Superdome(NUMA结构)的相对性能值是20，而8路N4000(共享的SMP结构)的相对性能值是6.3。从这个结果可以看到，8倍数量的CPU换来的只是3倍性能的提升。 &lt;/p&gt;
&lt;h2&gt;MPP&lt;/h2&gt;
&lt;p&gt;MPP即&lt;code&gt;Massive Parallel Processing&lt;/code&gt;，海量并行处理架构。
和NUMA不同，MPP提供了另外一种进行系统扩展的方式，它由多个SMP服务器通过一定的节点互联网络进行连接，协同工作，完成相同的任务，从用户的角度来看是一个服务器系统。其基本特征是由多个SMP服务器(每个SMP服务器称节点)通过节点互联网络连接而成，每个节点只访问自己的本地资源(内存、存储等)，是一种完全无共享(Share Nothing)结构，因而扩展能力最好，理论上其扩展无限制，目前的技术可实现512个节点互联，数千个CPU。目前业界对节点互联网络暂无标准，如 NCR的Bynet，IBM的SPSwitch，它们都采用了不同的内部实现机制。但节点互联网仅供MPP服务器内部使用，对用户而言是透明的。&lt;/p&gt;
&lt;p&gt;在MPP系统中，每个SMP节点也可以运行自己的操作系统、数据库等。但和NUMA不同的是，它不存在异地内存访问的问题。换言之，每个节点内的CPU不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，这个过程一般称为数据重分配(Data Redistribution)。&lt;/p&gt;
&lt;p&gt;但是MPP服务器需要一种复杂的机制来调度和平衡各个节点的负载和并行处理过程。目前一些基于MPP技术的服务器往往通过系统级软件(如数据库)来屏蔽这种复杂性。举例来说，NCR的Teradata就是基于MPP技术的一个关系数据库软件，基于此数据库来开发应用时，不管后台服务器由多少个节点组成，开发人员所面对的都是同一个数据库系统，而不需要考虑如何调度其中某几个节点的负载。&lt;/p&gt;
&lt;h2&gt;NUMA与MPP的区别&lt;/h2&gt;
&lt;p&gt;从架构来看，NUMA与MPP具有许多相似之处：它们都由多个节点组成，每个节点都具有自己的CPU、内存、I/O，节点之间都可以通过节点互联机制进行信息交互。那么它们的区别在哪里？通过分析下面NUMA和MPP服务器的内部架构和工作原理不难发现其差异所在。&lt;/p&gt;
&lt;p&gt;首先是节点互联机制不同，NUMA的节点互联机制是在同一个物理服务器内部实现的，当某个CPU需要进行远地内存访问时，它必须等待，这也是NUMA服务器无法实现CPU增加时性能线性扩展的主要原因。而MPP的节点互联机制是在不同的SMP服务器外部通过I/O 实现的，每个节点只访问本地内存和存储，节点之间的信息交互与节点本身的处理是并行进行的。因此MPP在增加节点时性能基本上可以实现线性扩展。&lt;/p&gt;
&lt;p&gt;其次是内存访问机制不同。在NUMA服务器内部，任何一个CPU可以访问整个系统的内存，但远地访问的性能远远低于本地内存访问，因此在开发应用程序时应该尽量避免远地内存访问。在MPP服务器中，每个节点只访问本地内存，不存在远地内存访问的问题。&lt;/p&gt;
&lt;h2&gt;数据仓库的选择&lt;/h2&gt;
&lt;p&gt;哪种服务器更加适应数据仓库环境？这需要从数据仓库环境本身的负载特征入手。众所周知，典型的数据仓库环境具有大量复杂的数据处理和综合分析，要求系统具有很高的I/O处理能力，并且存储系统需要提供足够的I/O带宽与之匹配。而一个典型的OLTP系统则以联机事务处理为主，每个交易所涉及的数据不多，要求系统具有很高的事务处理能力，能够在单位时间里处理尽量多的交易。显然这两种应用环境的负载特征完全不同。&lt;/p&gt;
&lt;p&gt;从NUMA架构来看，它可以在一个物理服务器内集成许多CPU，使系统具有较高的事务处理能力，由于远地内存访问时延远长于本地内存访问，因此需要尽量减少不同CPU模块之间的数据交互。显然，NUMA架构更适用于OLTP事务处理环境，当用于数据仓库环境时，由于大量复杂的数据处理必然导致大量的数据交互，将使CPU的利用率大大降低。&lt;/p&gt;
&lt;p&gt;相对而言，MPP服务器架构的并行处理能力更优越，更适合于复杂的数据综合分析与处理环境。当然，它需要借助于支持MPP技术的关系数据库系统来屏蔽节点之间负载平衡与调度的复杂性。另外，这种并行处理能力也与节点互联网络有很大的关系。显然，适应于数据仓库环境的MPP服务器，其节点互联网络的I/O性能应该非常突出，才能充分发挥整个系统的性能。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;1.http://blog.csdn.net/chengleisheng/article/details/43454515&lt;/p&gt;</content></entry><entry><title>Git常用操作</title><link href="https://andiaq.github.io/articles/git-usages.html" rel="alternate"></link><published>2016-12-11T20:24:00+08:00</published><updated>2016-12-11T20:24:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-12-11:/articles/git-usages.html</id><summary type="html">&lt;p&gt;对于开源项目的开发来说，熟练使用git的应该算是必备技能。本篇博客记录了平时工作中较常用的git操作。&lt;/p&gt;
&lt;h2&gt;git log&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;显示所有历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示最近N条历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log -N &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示详细历史记录，包括代码改动内容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log -p &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;只显示一行，哈希值和提交说明&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log --pretty=oneline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示提交历史记录的简单图形&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# glog&lt;/span&gt;
&lt;span class="c1"&gt;# git log --pretty=format:&amp;quot;%H %s&amp;quot; --graph&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;自定义格式显示历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log --pretty=format:&amp;quot; &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常用的格式占位符写法及其代表的意义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;   &lt;span class="err"&gt;说明&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;  &lt;span class="err"&gt;提交对象（&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="err"&gt;）的完整哈希字串&lt;/span&gt;
&lt;span class="nf"&gt;%h&lt;/span&gt;  &lt;span class="err"&gt;提交对象的简短哈希字串&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;  &lt;span class="err"&gt;树对象（&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="err"&gt;）的完整哈希字串 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;对于开源项目的开发来说，熟练使用git的应该算是必备技能。本篇博客记录了平时工作中较常用的git操作。&lt;/p&gt;
&lt;h2&gt;git log&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;显示所有历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示最近N条历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log -N &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示详细历史记录，包括代码改动内容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log -p &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;只显示一行，哈希值和提交说明&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log --pretty=oneline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示提交历史记录的简单图形&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# glog&lt;/span&gt;
&lt;span class="c1"&gt;# git log --pretty=format:&amp;quot;%H %s&amp;quot; --graph&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;自定义格式显示历史记录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log --pretty=format:&amp;quot; &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常用的格式占位符写法及其代表的意义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;   &lt;span class="err"&gt;说明&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;  &lt;span class="err"&gt;提交对象（&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="err"&gt;）的完整哈希字串&lt;/span&gt;
&lt;span class="nf"&gt;%h&lt;/span&gt;  &lt;span class="err"&gt;提交对象的简短哈希字串&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;  &lt;span class="err"&gt;树对象（&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="err"&gt;）的完整哈希字串&lt;/span&gt;
&lt;span class="nf"&gt;%t&lt;/span&gt;  &lt;span class="err"&gt;树对象的简短哈希字串&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;  &lt;span class="err"&gt;父对象（&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="err"&gt;）的完整哈希字串&lt;/span&gt;
&lt;span class="nf"&gt;%p&lt;/span&gt;  &lt;span class="err"&gt;父对象的简短哈希字串&lt;/span&gt;
&lt;span class="nf"&gt;%an&lt;/span&gt; &lt;span class="err"&gt;作者（&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="err"&gt;）的名字&lt;/span&gt;
&lt;span class="nf"&gt;%ae&lt;/span&gt; &lt;span class="err"&gt;作者的电子邮件地址&lt;/span&gt;
&lt;span class="nf"&gt;%ad&lt;/span&gt; &lt;span class="err"&gt;作者修订日期（可以用&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;选项定制格式）&lt;/span&gt;
&lt;span class="nf"&gt;%ar&lt;/span&gt; &lt;span class="err"&gt;作者修订日期，按多久以前的方式显示&lt;/span&gt;
&lt;span class="nf"&gt;%cn&lt;/span&gt; &lt;span class="err"&gt;提交者&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;committer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;的名字&lt;/span&gt;
&lt;span class="nf"&gt;%ce&lt;/span&gt; &lt;span class="err"&gt;提交者的电子邮件地址&lt;/span&gt;
&lt;span class="nf"&gt;%cd&lt;/span&gt; &lt;span class="err"&gt;提交日期&lt;/span&gt;
&lt;span class="nf"&gt;%cr&lt;/span&gt; &lt;span class="err"&gt;提交日期，按多久以前的方式显示&lt;/span&gt;
&lt;span class="nf"&gt;%s&lt;/span&gt;  &lt;span class="err"&gt;提交说明&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# git log --pretty=format:&amp;quot;%H | %an | %s&amp;quot;&lt;/span&gt;
6f74e1e5d83fbfd5fa7d9a079854e168689920b5 &lt;span class="p"&gt;|&lt;/span&gt; AndiaQ &lt;span class="p"&gt;|&lt;/span&gt; Merge branch &lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt; of git.ustack.com:uos3/nova
486b90b24e9515678166d0b370e4daefe4e9e341 &lt;span class="p"&gt;|&lt;/span&gt; Jenkins &lt;span class="p"&gt;|&lt;/span&gt; Merge &lt;span class="s2"&gt;&amp;quot;Make server_external_events cells-aware&amp;quot;&lt;/span&gt;
6a3b436b09321259d4fe1c5079c65d0241464a3a &lt;span class="p"&gt;|&lt;/span&gt; Jenkins &lt;span class="p"&gt;|&lt;/span&gt; Merge &lt;span class="s2"&gt;&amp;quot;Remove service version check for Ocata/Newton placement decisions&amp;quot;&lt;/span&gt;
8bbc1eeca75f2ebdd57d977ebb9004ac1ade6690 &lt;span class="p"&gt;|&lt;/span&gt; Jenkins &lt;span class="p"&gt;|&lt;/span&gt; Merge &lt;span class="s2"&gt;&amp;quot;Fix novncproxy for python3&amp;quot;&lt;/span&gt;
94f3281a53b0592a8985f7301dd0a62c6b413a90 &lt;span class="p"&gt;|&lt;/span&gt; Dan Smith &lt;span class="p"&gt;|&lt;/span&gt; Make server_external_events cells-aware
c604a6cf16441458df79654cb2cfbb551fa7d0b7 &lt;span class="p"&gt;|&lt;/span&gt; Dan Smith &lt;span class="p"&gt;|&lt;/span&gt; Remove service version check &lt;span class="k"&gt;for&lt;/span&gt; Ocata/Newton placement decisions
384e02217df4aae72340e169d05b9d595f54fb37 &lt;span class="p"&gt;|&lt;/span&gt; Jenkins &lt;span class="p"&gt;|&lt;/span&gt; Merge &lt;span class="s2"&gt;&amp;quot;Tests: improve assertJsonEqual diagnostic message&amp;quot;&lt;/span&gt;
c746974054e1a78032051fef7202a1b98dc9603f &lt;span class="p"&gt;|&lt;/span&gt; Jenkins &lt;span class="p"&gt;|&lt;/span&gt; Merge &lt;span class="s2"&gt;&amp;quot;Raise correct error instead of class exist in Placement API&amp;quot;&lt;/span&gt;
f6885362fe4e08a7019504bc5d7cc4e717d3c9af &lt;span class="p"&gt;|&lt;/span&gt; zhouweiyu &lt;span class="p"&gt;|&lt;/span&gt; Initial empty repository
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;git rebase&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;操作简单理解就是“换基”。一般只操作还未push到远程仓库的commit，一旦push到了远程仓库，那么不允许再修改commit，不然会给其他开发带来很多麻烦。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       Assume the following history exists and the current branch is &amp;quot;topic&amp;quot;:

                     A---B---C topic
                    /
               D---E---F---G master


       From this point, the result of either of the following commands:

           git rebase master
           git rebase master topic

       would be:

                             A&amp;#39;--B&amp;#39;--C&amp;#39; topic
                            /
               D---E---F---G master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上图所示，topic和master有共同的基E，即topic分支是从master分支的E点切出来的新分支。当topic分支有了自己的私有开发，但master分支仍然在更新时，若操作者需要拉取master分支更新的内容，这时就需要“换基”。也就是说，将topic的HEAD变成master分支最新的G，将自己的私有代码放到master分支的尾巴上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;还有一些高级且很重要的操作。&lt;/p&gt;
&lt;h3&gt;commit合并&lt;/h3&gt;
&lt;p&gt;当需要在一个分支上将两个或者以上的commits合并时，我们可以通过&lt;code&gt;git rebase -i&lt;/code&gt;来完成这件事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 是 &lt;code&gt;--interactive&lt;/code&gt; 的简写，在使用 git rebase -i 时，我们要在后面再添加一个参数，这个参数应该是 最新的一个想保留的 Commit。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下是一个简单的范例，将e46b345和44e910a两次commits合并成一个。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  nova git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s2"&gt;&amp;quot;%H| %s&amp;quot;&lt;/span&gt;
e46b345324a8411e8b9b1a085f3df67e48799c48 &lt;span class="p"&gt;|&lt;/span&gt; Fix novncproxy &lt;span class="k"&gt;for&lt;/span&gt; python3
44e910a693b424a2f75fbca76f97eb6d8ed94fc7 &lt;span class="p"&gt;|&lt;/span&gt; Tests: improve assertJsonEqual diagnostic message
e8b7214946fd124e568495cd7cd78ae3e0033d07 &lt;span class="p"&gt;|&lt;/span&gt; Raise correct error instead of class exist in Placement API
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据上面的解释，那么&lt;code&gt;-i&lt;/code&gt;后面的commit就是&lt;code&gt;e8b7214&lt;/code&gt;。（若想将&lt;code&gt;44e910a&lt;/code&gt;和&lt;code&gt;e8b7214&lt;/code&gt;合并的话，则&lt;code&gt;-i&lt;/code&gt;后面的commit应该是&lt;code&gt;e46b345&lt;/code&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rebase -i e8b7214
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入如下编辑界面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 44e910a Tests: improve assertJsonEqual diagnostic message                                                                                                                                                                              
pick e46b345 Fix novncproxy &lt;span class="k"&gt;for&lt;/span&gt; python3

&lt;span class="c1"&gt;# Rebase e8b7214..e46b345 onto e8b7214&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Commands:&lt;/span&gt;
&lt;span class="c1"&gt;#  p, pick = use commit&lt;/span&gt;
&lt;span class="c1"&gt;#  r, reword = use commit, but edit the commit message&lt;/span&gt;
&lt;span class="c1"&gt;#  e, edit = use commit, but stop for amending&lt;/span&gt;
&lt;span class="c1"&gt;#  s, squash = use commit, but meld into previous commit&lt;/span&gt;
&lt;span class="c1"&gt;#  f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit&amp;#39;s log message&lt;/span&gt;
&lt;span class="c1"&gt;#  x, exec = run command (the rest of the line) using shell&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# However, if you remove everything, the rebase will be aborted.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Note that empty commits are commented out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简单说明一下以上注释中的部分内容：
- &lt;code&gt;squash&lt;/code&gt;:使用该commit，会被合并到上一个commit&lt;/p&gt;
&lt;p&gt;因此我们将用到的就是这个command。下面在编辑框中修改如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick 44e910a Tests: improve assertJsonEqual diagnostic message
squash e46b345 Fix novncproxy for python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完后wq保存并退出，出现如下界面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This is a combination of 2 commits.                                                                                                                                                                                                       &lt;/span&gt;
&lt;span class="c1"&gt;# The first commit&amp;#39;s message is:&lt;/span&gt;

Tests: improve assertJsonEqual diagnostic message

This change adds a path information in assertJsonEqual output.
Example:
before: Difference: &lt;span class="m"&gt;1&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
arter: Difference: &lt;span class="m"&gt;1&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;: path: root.country.state.city&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.street.building

Change-Id: I4243e48cc7f01b5fa049e0c4aef48a72cc640d0a

&lt;span class="c1"&gt;# This is the 2nd commit message:&lt;/span&gt;

Fix novncproxy &lt;span class="k"&gt;for&lt;/span&gt; python3

The getheader&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; isn&lt;span class="s1"&gt;&amp;#39;t available in python3 [1]. Instead one can &lt;/span&gt;
&lt;span class="s1"&gt;simply use get() similar to what is done in the websockify module that&lt;/span&gt;
&lt;span class="s1"&gt;this code is using.&lt;/span&gt;

&lt;span class="s1"&gt;[1] https://bugs.python.org/issue4773&lt;/span&gt;

&lt;span class="s1"&gt;Change-Id: I349742d80e0abeb7866eeeb647ce18948eff81f8&lt;/span&gt;
&lt;span class="s1"&gt;Partial-Bug: 1663593&lt;/span&gt;

&lt;span class="s1"&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt;
&lt;span class="s1"&gt;# with &amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;#&amp;#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Author:    Andrey Volkov &amp;lt;avolkov@mirantis.com&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# rebase in progress; onto e8b7214&lt;/span&gt;
&lt;span class="c1"&gt;# You are currently editing a commit while rebasing branch &amp;#39;master&amp;#39; on &amp;#39;e8b7214&amp;#39;.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/console/websocketproxy.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/test.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/tests/unit/console/test_websocketproxy.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/tests/unit/test_test.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出这是一个输入commit message的界面，修改成你想写的内容即可，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Merge commits 44e910a and e46b345                                                   

&lt;span class="c1"&gt;# Please enter the commit message for your changes. Lines starting&lt;/span&gt;
&lt;span class="c1"&gt;# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Author:    Andrey Volkov &amp;lt;avolkov@mirantis.com&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# rebase in progress; onto e8b7214&lt;/span&gt;
&lt;span class="c1"&gt;# You are currently editing a commit while rebasing branch &amp;#39;master&amp;#39; on &amp;#39;e8b7214&amp;#39;.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/console/websocketproxy.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/test.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/tests/unit/console/test_websocketproxy.py&lt;/span&gt;
&lt;span class="c1"&gt;#       modified:   nova/tests/unit/test_test.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完后wq保存退出，提示已经rebase成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  nova git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git rebase -i e8b7214
&lt;span class="o"&gt;[&lt;/span&gt;detached HEAD d51b317&lt;span class="o"&gt;]&lt;/span&gt; Merge commits 44e910a and e46b345
 Author: Andrey Volkov &amp;lt;avolkov@mirantis.com&amp;gt;
 &lt;span class="m"&gt;4&lt;/span&gt; files changed, &lt;span class="m"&gt;197&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;139&lt;/span&gt; deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
Successfully rebased and updated refs/heads/master.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入历史记录查看。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  nova git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s2"&gt;&amp;quot;%H | %s&amp;quot;&lt;/span&gt;
d51b31794a628d2e2d21d6089d188ab7ab27b5cb &lt;span class="p"&gt;|&lt;/span&gt; Merge commits 44e910a and e46b345
e8b7214946fd124e568495cd7cd78ae3e0033d07 &lt;span class="p"&gt;|&lt;/span&gt; Raise correct error instead of class exist in Placement API
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更换commits顺序&lt;/h3&gt;
&lt;p&gt;在本地基于某个分支做开发时，由于总会不断的完善功能，很容易出现一些小功能之间穿插提交代码，造成commits比较混乱。&lt;code&gt;git rebase -i&lt;/code&gt;依然可以很好地解决这个问题。&lt;/p&gt;
&lt;p&gt;以下范例是需要将dev1-2和dev2-1调整顺序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s2"&gt;&amp;quot;%h | %s&amp;quot;&lt;/span&gt;
12be243 &lt;span class="p"&gt;|&lt;/span&gt; dev2-2
da0a1d4 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
22a5a50 &lt;span class="p"&gt;|&lt;/span&gt; dev1-2
14bbd74 &lt;span class="p"&gt;|&lt;/span&gt; dev2-1
98e752f &lt;span class="p"&gt;|&lt;/span&gt; dev1-1
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:(master) git rebase -i 98e752f

pick 14bbd74 dev2-1
pick 22a5a50 dev1-2
pick da0a1d4 test
pick 12be243 dev2-2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将以上内容显示的顺序与git log查看的顺序完全相反。只需将&lt;code&gt;dev1-2&lt;/code&gt;和&lt;code&gt;dev2-1&lt;/code&gt;调换顺序即可。调换顺序后保存退出，查看历史记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:(master) git log --pretty=format:&amp;quot;%h | %s&amp;quot;
ff2c926 | dev2-2
f894e78 | test
8482018 | dev2-1
6743e79 | dev1-2
98e752f | dev1-1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若想将test这次的commit删除，同样只需在编辑框中删除&lt;code&gt;pick da0a1d4 test&lt;/code&gt;这一行。&lt;/p&gt;
&lt;h2&gt;git fetch&lt;/h2&gt;
&lt;p&gt;当远程仓库有了新的更新，需要将新的commits更新到本地时，可使用&lt;code&gt;git fetch&lt;/code&gt;完成操作。&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取远程主机所有更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch &amp;lt;远程主机名&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;获取远程主机特定分支上的所有更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch &amp;lt;远程主机名&amp;gt; &amp;lt;分支名&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:(master) git remote -v
trystack    http://git.trystack.cn/openstack/nova.git (fetch)
trystack    http://git.trystack.cn/openstack/nova.git (push)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上，若想获取将远程trystack仓库nova的newton分支上的所有更新，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch trystack stable/newton
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:(master) git branch -a
* master
  remotes/trystack/stable/newton
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若想将以上fetch到的远程分支拉取到本地，可基于远程分支切换新的分支，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tests git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git checkout -b stable/newton trystack/stable/newton
Branch stable/newton &lt;span class="nb"&gt;set&lt;/span&gt; up to track remote branch stable/newton from trystack.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理，若想获取远程仓库master分支的所有更新，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;获取远程master分支
&lt;span class="c1"&gt;# git fetch trystack master  &lt;/span&gt;
切换到本地master分支
&lt;span class="c1"&gt;# git checkout master       &lt;/span&gt;
rebase本地master到远程master
&lt;span class="c1"&gt;# git rebase trystack/master  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;git tag&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建tag。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git tag -a &amp;lt;tag号&amp;gt; &amp;lt;commit号&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;删除多个tag。有如下两种方式。使用正则表达式进行过滤即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  nova git:(master) git tag | awk &amp;#39;/2012/&amp;#39; | xargs git tag -d
Deleted tag &amp;#39;2012.1&amp;#39; (was 49934aa)
Deleted tag &amp;#39;2012.1.1&amp;#39; (was 29293ce)
Deleted tag &amp;#39;2012.1.2&amp;#39; (was 7a7c8f8)
...
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# git show-ref --tag | awk &amp;#39;/2012/ {print &amp;quot;:&amp;quot;$2}&amp;#39; | xargs git push origin
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>OpenStack Networking Guide</title><link href="https://andiaq.github.io/articles/networking-guide.html" rel="alternate"></link><published>2016-12-11T20:24:00+08:00</published><updated>2016-12-11T20:24:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-12-11:/articles/networking-guide.html</id><summary type="html">&lt;p&gt;该系列文章基本翻译于社区的Networking Guide，个人理解，原创翻译，仅供学习参考。&lt;/p&gt;
&lt;h3&gt;一、网络绪论&lt;/h3&gt;
&lt;p&gt;OpenStack 网络服务提供了 API 接口，用户可以建立和自定义网络的拓扑结构并且访问云网络。这个网络服务的项目代码是 Neutron，OpenStack 网络服务操作着虚拟网络设施的创建和管理，这些虚拟网络设施包括网络，交换机，子网，以及为 openstack 计算服务（nova）所管理的设备提供的路由，还包括一些高级服务比如防火墙，虚拟专用网络 VPN 等等。&lt;/p&gt;
&lt;p&gt;OpenStack 网络是由 neutron-server 组件，持久化存储的数据库，以及很多 plugin,agent 组成的。这些 agent 提供了一些其他的服务，比如与原生的 linux 网络机制，外部设备，或者 SDN controller 进行交互等等。&lt;/p&gt;
&lt;p&gt;OpenStack 网络是完全独立的服务 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;该系列文章基本翻译于社区的Networking Guide，个人理解，原创翻译，仅供学习参考。&lt;/p&gt;
&lt;h3&gt;一、网络绪论&lt;/h3&gt;
&lt;p&gt;OpenStack 网络服务提供了 API 接口，用户可以建立和自定义网络的拓扑结构并且访问云网络。这个网络服务的项目代码是 Neutron，OpenStack 网络服务操作着虚拟网络设施的创建和管理，这些虚拟网络设施包括网络，交换机，子网，以及为 openstack 计算服务（nova）所管理的设备提供的路由，还包括一些高级服务比如防火墙，虚拟专用网络 VPN 等等。&lt;/p&gt;
&lt;p&gt;OpenStack 网络是由 neutron-server 组件，持久化存储的数据库，以及很多 plugin,agent 组成的。这些 agent 提供了一些其他的服务，比如与原生的 linux 网络机制，外部设备，或者 SDN controller 进行交互等等。&lt;/p&gt;
&lt;p&gt;OpenStack 网络是完全独立的服务，可以部署到一个专用的节点。如果我们的部署使用了一个控制节点来运行核心的计算组件（NOVA），那么我们可以把网络服务部署到另一个专用节点上。&lt;/p&gt;
&lt;p&gt;OpenStack 网络已与多种OpenStack组件整合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身份认证服务(Keystone)：进行用户验证和授权API请求。&lt;/li&gt;
&lt;li&gt;计算服务(Nova)：为虚拟机提供虚拟网卡。&lt;/li&gt;
&lt;li&gt;控制面板(horizon)：管理员和租户可以通过一个基于web的图形界面来创建和管理网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.1 网络基础&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;以太网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以太网是一种具有IEEE802.3标准特性的网络协议。&lt;strong&gt;大多数的物理网卡都是通过以太网来通信。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在OSI模型的网络协议中，以太网在第二层，也被称为数据链路层。说到以太网，我们常听到以下几种词语，比如局域网，二层网，L2，链路层和数据链路层等等。&lt;/p&gt;
&lt;p&gt;在以太网中，连接到网络中的主机通过&lt;strong&gt;交换帧&lt;/strong&gt;来通信。以太网中的每一个主机唯一地被MAC地址所标识。在一个 OpenStack 环境中，每个虚拟机实例都有一个独一无二的 MAC 地址，不同于计算节点上的 MAC 地址。一个 MAC 地址有 48bits，是十六进制字符串的典型代表，比如&lt;code&gt;08:00:27:b9:88:74&lt;/code&gt;。MAC地址是由制造商通过硬编码到网卡上，但是现代的网卡允许你通过程序来改变MAC地址。在linux中，你可以使用ip命令来获取网卡的MAC地址。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ip link show eth0&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast state UP mode DEFAULT qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether fa:16:3e:5a:34:50 brd ff:ff:ff:ff:ff:ff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从概念上讲，你可以把以太网想象成一个每个网络上的主键都可以连接的单总线。在早期实现中，一个以太网包含了一条同轴电缆，主机可以因此连接网络。而现代的以太网络不使用这个方法，取而代之的是，每个网络主机都可以直接连到一个被称为交换机的网络设备。这个概念模型非常的有用。在OpenStack网络拓扑中，以太网通常被描述得类似是一条单总线。你会经常听到一个以太网被称为二层网络段。&lt;/p&gt;
&lt;p&gt;在以太网中，网络中的每个主机都可以向其他主机直接发送帧。以太网也支持广播，因此一个主机可以通过发送一个特殊的MAC地址&lt;code&gt;ff:ff:ff:ff:ff:ff&lt;/code&gt;，通过这个地址发送一个数据帧到网络中的每一台主机。ARP和DHCP是使用以太网广播的两个著名的协议，你可能也会听到一个以太网络被称为一个广播域。&lt;/p&gt;
&lt;p&gt;当一个网卡接收到一个以太网帧，默认情况下网卡会检查目的 MAC 地址是否与网卡（或者广播）的地址相匹配，如果 MAC 地址不匹配，以太网帧就会被丢掉。对计算节点来说，这一行为是不被容忍的，因为这个帧可能会被用于某个实例。NIC可以被配置为混杂模式，在混杂模式中，NIC 会把所有的以太网帧传到操作系统，即使MAC地址并不匹配。计算节点也应该经常为混杂模式配置合适的 NICs。&lt;/p&gt;
&lt;p&gt;正如上面所提到的，现代以太网络使用交换机来使网络中的主机互相连接。交换机是一个拥有很多端口的网络硬件盒，将以太网帧从一个已连接的主机发送到另一台主机。当主机第一次在交换机上发送以太网帧时，交换机并不知道是哪一个MAC地址与这个端口相对应。如果一个以太网帧发往的是一个未知的MAC地址，交换机会将帧广播到所有的端口。端口通过观察流量来知道哪个MAC地址对应于哪个端口。一旦知道端口对应的MAC地址，它就将以太网帧发送到正确的端口而不是采取广播的方式。交换机在一个转发表或者转发信息库中保存了MAC地址到交换机端口的映射关系。多个交换机呈菊链状地连接在一起，交换机和主机的连接后的表现得像是单一的网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VLAN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VLAN 是一个可以使单个交换机表现得像是多个独立的交换机的网络技术。主要特点在于，连接到同一个交换机上但不是同一个局域网的两个主机观察不到对方的流量。OpenStack能够充分利用虚拟局域网隔离不同租户网络的优势，即使租户碰巧在同一个宿主机上运行着多个虚拟机实例。每一个虚拟局域网都被在1到4095中分配了一个ID。我们说“VLAN 15”指的就是ID号为15的虚拟局域网。&lt;/p&gt;
&lt;p&gt;为了理解VLANs如何工作，让我们来思考在传统IT环境中VLAN的应用，所谓的传统IT环境，即多台物理主机被连接到一台物理交换机，不涉及到虚拟化技术。设想这样一种方案，即你需要三个独立的网络，但是你只有一个物理交换机。网络管理员可能会选择三个VLAN ID，比如10,11,12，再配置交换机将交换机端口与VLAN ID相连接。比如交换机2号端口可能会与10号的VLAN相连，交换机3号端口可能会与11号的VLAN相连等等。当一个交换机端口为一个特殊的VLAN所配置，则这个端口被称为访问端口。交换机负责的就是确保网络流量在VLANs中被隔离。&lt;/p&gt;
&lt;p&gt;现在来考虑这样一种方案：第一个交换机的所有端口都被占用，因此机构购买了第二个交换机并将其与第一个交换机相连，以扩展可用的端口的数量。第二个交换机同样被配置成支持ID号为10,11,12的VLAN。现在设想与第一个交换机上被配置成10号VLAN的端口相连的主机A，欲打算向与第二个交换机上被配置成10号VLAN的端口相连的主机B发送一个以太网帧，当第一个交换机转发一个以太网帧到第二个交换机时，它必须表明这个帧与10号VLAN相关。&lt;/p&gt;
&lt;p&gt;如果两个交换机被连接到了一起，配置好了VLAN，则被用来连接两个交换机的端口必须被配置成允许来自任何VLAN的以太网帧都可以被转发到其他的交换机。另外，发送方交换机必须用VLAN号来标记每个以太网帧，因此接收方的交换机便可以确保只有VLAN匹配的主机才能接受帧。&lt;/p&gt;
&lt;p&gt;当一个交换机端口被配置成可以传输来自所有VLANs的以太网帧，并将它们用VLAN号做了标记，这种端口被称为传输端口。IEEE802.1Q是一种描述了当使用传输端口时，VLAN标记是如何被编码到以太网帧的网络协议。&lt;/p&gt;
&lt;p&gt;注意，如果你在你的物理交换机上使用VLANs来实现你的OpenStack云中的租户隔离，你就必须保证你所有的交换机端口都被配置成传输端口。&lt;/p&gt;
&lt;p&gt;在你当前网络基础设施中选择一个未被使用的VLAN地址范围是非常重要的。比如，如果你估计你的云必须最大可以支持100个项目，选择一个超出这个最大值的VLAN范围，比如200-299号的VLAN。处理租户网络的OpenStack和所有的物理网络基础设施都必须支持这个VLAN范围。&lt;/p&gt;
&lt;p&gt;传输端口可以被用来连接不同的交换机。每个传输端口使用一个标记来表明哪些VLAN被使用，这便确保了在同一个VLAN的交换机可以相互通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Subnets and ARP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网卡使用MAC地址找到网络主机，而TCP/IP层使用的是IP地址。地址解析协议ARP通过将IP地址转换成MAC地址在以太网和IP层之间建起了桥。 IP地址被分为两个部分：网络号和主机号。如果两个主机有相同的网络号就说明他们在同一个子网上。回想之前所说如果两个主机在同一个子网上，它们便可以直接在以太网上通信。ARP假定在同一个子网的所有的机器都在同一个本地局域网。网络管理员必须关系给主机分配IP地址和子网掩码，确保在同一个子网上的任何两台主机都在同一个本地局域网，否则ARP不会正常工作。&lt;/p&gt;
&lt;p&gt;为了计算一个IP地址的网络号，你必须知道与这个IP地址相关的子网掩码。子网掩码表明了在一个32位的IP地址中有多少位被用来组成网络号。 表示一个子网掩码有以下两种标记法： - 点分四位 - 无分类域间路由CIDR&lt;/p&gt;
&lt;p&gt;有一个IP地址为192.168.1.5，其前24位为网络号。在点分四位标记法中，这个子网掩码可以被写成255.255.255.0。CIDR标记法包括IP地址和子网掩码，可以被写成192.168.1.5/24。&lt;/p&gt;
&lt;p&gt;【注】：一个包括多播地址或者回环地址的CIDR子网掩码不能在OpenStack环境中被使用。比如，不支持使用224.0.0.0/16或者127.0.1.0/24作为子网。&lt;/p&gt;
&lt;p&gt;有时候我们想使用一个子网，但是在这个子网上没有任何特殊的IP地址，一个常遵循的惯例就是设置主机标识符全0来指向一个子网。比如，如果一个主机的IP地址为10.10.53.24/16，我们可以说其子网为10.10.0.0/16。&lt;/p&gt;
&lt;p&gt;为了理解ARP是如何将IP地址转换成MAC地址，我们可以看以下例子。假设主机A的IP地址是192.168.1.5/24， MAC地址是fc:99:47:49:d4:a0， 想向IP地址为192.168.1.7的主机B发送一个数据包。注意两个的主机有相同的子网号，所以主机A可以直接向主机B发送数据帧。&lt;/p&gt;
&lt;p&gt;主机A第一次试图和主机B通信，但是目的MAC地址未知。主机A便向局域网发出一个ARP请求，这个请求带有如下信息的广播：&lt;/p&gt;
&lt;p&gt;To：所有主机(ff:ff:ff:ff:ff:ff)，我在寻找IP地址为192.168.1.7的主机。我的MAC地址是fc:99:47:49:d4:a0。 主机B回复如下的响应报文： To：fc:99:47:49:d4:a0，我的IP地址是192.168.1.7。我的MAC地址是54:78:1a:86:00:a5。 然后主机A便向主机B发送以太网帧。 你可以使用arping命令手动发起一个ARP请求。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~ arping -I eth0 &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6
ARPING &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.5 eth0
Unicast reply from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 &lt;span class="o"&gt;[&lt;/span&gt;FA:16:3E:6B:47:D8&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.829ms
Unicast reply from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 &lt;span class="o"&gt;[&lt;/span&gt;FA:16:3E:6B:47:D8&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.981ms
Unicast reply from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 &lt;span class="o"&gt;[&lt;/span&gt;FA:16:3E:6B:47:D8&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.903ms
Unicast reply from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 &lt;span class="o"&gt;[&lt;/span&gt;FA:16:3E:6B:47:D8&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.970ms
Unicast reply from &lt;span class="m"&gt;172&lt;/span&gt;.16.1.6 &lt;span class="o"&gt;[&lt;/span&gt;FA:16:3E:6B:47:D8&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.832ms
^CSent &lt;span class="m"&gt;5&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;5&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了减少ARP请求的数量，操作系统会保留一个包含IP地址和MAC地址映射的ARP缓存。在linux机器上，你可以使用arp命令来查看ARP缓存的内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~ arp -n
Address                  HWtype  HWaddress           Flags Mask            Iface
&lt;span class="m"&gt;172&lt;/span&gt;.16.1.1               ether   fa:16:3e:d7:2f:5e   C                     eth0
&lt;span class="m"&gt;172&lt;/span&gt;.16.1.6               ether   fa:16:3e:6b:47:d8   C                     eth0
&lt;span class="m"&gt;172&lt;/span&gt;.16.1.7               ether   fa:16:3e:f9:fa:7c   C                     eth0
&lt;span class="m"&gt;172&lt;/span&gt;.16.1.4               ether   fa:16:3e:f6:1a:64   C                     eth0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;动态主机控制协议DHCP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接到网络上的主机可以使用动态主机控制协议来自动获取IP地址。由DHCP服务器分发IP地址给网络上的主机，这些主机即DHCP client。 DHCP client通过从68号端口发送UDP数据包到67号端口的255.255.255.255地址来确定DHCP server的位置。255.255.255.255是局域网的广播地址：在本地局域网的所有的主机都可以查看到发往这个地址的UDP数据包。然而，这种数据包不会被转发到其他的网络上。因此，DHCP server和DHCP client必须在一个局域网内，否则DHCP server将接收不到广播包。DHCP server通过从67号端口往client的68号端口发送一个UDP数据包作为回应。交换过程如下：
1. 客户端发送一个discover（“我是MAC地址为08:00:27:b9:88:74的客户端，我需要一个IP地址”
2. 服务端发送一个offer（“好的，我可以提供的IP地址是10.10.0.112”）
3. 客户端发送一个request（“服务器10.10.0.131，我想要10.10.0.112这个IP地址”）
4. 服务端发送一个acknowledgement（“好的，08:00:27:b9:88:74，10.10.0.112这个IP地址就是你的了。”）&lt;/p&gt;
&lt;p&gt;OpenStack需要一个三方程序Dnsmasq来实现DHCP服务器的功能，Dnsmasq写在系统日志，在这个日志里面你可以看到DHCP的请求的回复：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Apr 23 15:53:46 c100-1 dhcpd: DHCPDISCOVER from 08:00:27:b9:88:74 via eth2
Apr 23 15:53:46 c100-1 dhcpd: DHCPOFFER on 10.10.0.112 to 08:00:27:b9:88:74 via eth2
Apr 23 15:53:48 c100-1 dhcpd: DHCPREQUEST for 10.10.0.112 (10.10.0.131) from 08:00:27:b9:88:74 via eth2
Apr 23 15:53:48 c100-1 dhcpd: DHCPACK on 10.10.0.112 to 08:00:27:b9:88:74 via eth2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际OpenStack环境中，当虚拟机网络不可达时，我们可以通过检查这个日志来查看虚拟机在DHCP协议获取网络地址的哪个步骤有问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网际协议IP指定了连接在不同局域网上的主机如何路由数据包。IP依赖的是路由器或者说是网关。一个路由器可以被认为是至少连接了两个局域网的主机，可以将一个局域网中的IP数据包转发到另一个局域网上。路由器有多个IP地址：每个IP地址用于一个网络连接。&lt;/p&gt;
&lt;p&gt;在网络协议的OSI模型中，IP在第三层，也被称为网络层。说到IP，我们也常听到三层，L3和网络层这样的词语。&lt;/p&gt;
&lt;p&gt;主机发送一个数据包给IP地址询问它的路由表来决定这个数据包应该被发送到局域网的哪个主机，路由表中保存了与主机直接相连的局域网之间的映射。&lt;/p&gt;
&lt;p&gt;在linux机器上，下面的任何一个命令都可以显示路由表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ip route show&lt;/span&gt;
&lt;span class="c1"&gt;# route -n&lt;/span&gt;
&lt;span class="c1"&gt;# netstat -rn &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TCP/UDP/ICMP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于在IP层网络通信的网络软件应用程序来说，他们必须使用在IP层之上的协议，这些协议占据OSI模型的第四层，也被称为传输层或者L4。协议编号的web页面由互联网号码分配局（IANA）为IP层之上的层和与它们相关的编号在维护。&lt;/p&gt;
&lt;p&gt;传输控制协议TCP是在网络应用中最常被使用的四层协议，TCP是一个面向连接的协议：它使用客户端-服务器模型（即C/S模型），在这个模型中，客户端与服务器相连接，服务器指的是可以接收连接的应用。典型基于TCP协议的应用的交互过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端与服务器相连接&lt;/li&gt;
&lt;li&gt;客户端与服务器交换数据&lt;/li&gt;
&lt;li&gt;客户端或者服务器释放连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为一个网络主机可能有多个基于TCP协议的应用在运行，所以TCP协议使用端口来唯一的标识这些基于TCP的应用程序。一个TCP端口与1-65535范围内的一个数字相对应，在同一时刻，一个TCP端口只能与一个主机上的一个应用程序相关联，这一规则由操作系统在严格控制。 
TCP服务器在端口上被监听，比如，SSH服务器在22号端口被监听。对一个想与使用TCP协议的服务器连接的客户端来说，客户端必须知道服务器的IP地址和TCP端口号。&lt;/p&gt;
&lt;p&gt;TCP客户端应用程序所在的操作系统会自动的为其分配一个端口号，客户端在TCP连接释放前会一直拥有这个端口号，之后操作系统会对这个被释放的端口号进行回收，这些端口号被认为是临时端口号。&lt;/p&gt;
&lt;p&gt;互联网号码分配局（IANA）保存了大多数基于TCP服务和在端口上应用其他四层协议服务的注册端口号。注册一个端口号并不是硬性要求，但是这对避免与其他服务冲突非常的有用。欲知在OpenStack部署中被各种服务所使用的默认TCP端口号请阅读OpenStack配置参考书之Appendix B. Firewalls and default ports。&lt;/p&gt;
&lt;p&gt;编写基于TCP应用的API被称为伯克利套接字，也被称为BSD套接字，或者简称为套接字。套接字API公开面向流接口来编写TCP应用：从一个程序员的角度来看，在建立的TCP连接之上发送数据与写字节流到文件情况类似。操作系统的TCP/IP协议负责将数据流分解成IP包，操作系统同时还负责转播被丢弃的数据包，分发控制流来确保发出的数据不会超过发送方的数据缓冲区，接收方的数据缓冲区以及网络容量。最后，它还负责以正确的顺序重组数据包到接收方的数据流。因为TCP可以侦查和重发丢失的数据包，所以被称为可靠地协议。&lt;/p&gt;
&lt;p&gt;用户数据包协议（UDP）是另一种四层协议，是其他著名网络协议的基础。UDP是无连接的协议：两个基于UDP通信的应用程序在交换信息之前不用建立连接。UDP也是一种不可靠的协议，操作系统不会试图去重发或者去侦查丢失的UDP数据包，也不会保证接收端的应用程序接收UDP数据的顺序和发送的顺序相同。&lt;/p&gt;
&lt;p&gt;UDP和TCP一样，使用端口来区分在同一个系统上的不同应用程序。但是请注意，操作系统对UDP端口和TCP端口是分开处理的。比如，有一个与16543号TCP端口相关联的应用程序和有另一个独立的与16543号的UDP端口相关联的应用程序是可以实现的。&lt;/p&gt;
&lt;p&gt;和TCP一样，套接字API是编写基于UDP应用最常用的API。套接字API提供了编写UDP应用程序的面向信息的接口：程序员通过发送固定大小的消息在UDP上发送数据。如果应用程序需要重发丢失的数据包或者重新定义接收数据包的顺序，程序员就要负责在应用程序的代码中实现这个功能。&lt;/p&gt;
&lt;p&gt;动态主机控制协议（DHCP），域名解析系统（DNS），网络同步协议（NTP）和VXLAN都是在OpenStack环境中被使用的基于UDP的协议。&lt;/p&gt;
&lt;p&gt;UDP也支持一对多的通信：发送一个数据包到多个主机。应用程序可以通过设置接收端IP为广播地址255:255:255:255来广播一个UDP数据包到同一网络上的所有主机，还可以使用IP多播来发送一个UDP数据报到多个接收端。只要欲接收数据包的应用程序通过绑定一个UDP套接字到一个特殊的IP地址来加入一个多播组，而这个IP地址是合法多播组地址的其中一个。接收信息的主机可以不用在同一个局域网上作为发送方，但是介于中间的路由必须被配置成支持IP多播路由。VXLAN就是一个基于UDP协议使用IP多播的例子。&lt;/p&gt;
&lt;p&gt;网络控制报文协议（ICMP）是在IP层网络之上被用来发送控制信息的协议。比如，如果路由器的路由表中没有与目的地址相关的路由（1号ICMP，目的主机不可达），或者说如果IP数据包对路由器处理来说太（4号ICMP，需要分片但是被设置成了不分片），接收IP数据包的路由器就会发回一个ICMP差错报告报文。&lt;/p&gt;
&lt;p&gt;ping和mtr是使用ICMP的两个很实用的Linux命令行工具。&lt;/p&gt;</content></entry><entry><title>python eventlet及其在OpenStack中的应用</title><link href="https://andiaq.github.io/articles/python-eventlet.html" rel="alternate"></link><published>2016-11-16T17:34:00+08:00</published><updated>2016-11-16T17:34:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-11-16:/articles/python-eventlet.html</id><summary type="html">&lt;p&gt;一直迷糊于操作系统的进程线程协程等概念及其切换，本文从基础开始梳理，旨在学习python的eventlet,及其在OpenStack中的应用。&lt;/p&gt;
&lt;h3&gt;一、简介&lt;/h3&gt;
&lt;p&gt;eventlet是一个python的并发网络库，采用&lt;code&gt;epoll/pool/select&lt;/code&gt;等异步 IO，并结合 greenlet 协程库实现并发。简单来说，eventlet是帮助实现并发的python库，不一定并行，但是也可以并行；在讲究高并发与分布式的今天，同步和阻塞就慢，异步和非阻塞就快。&lt;/p&gt;
&lt;p&gt;协程是一种运行在线程中的执行单位，同一个线程中可以同时运行多个协程，注意：该同时运行并不是真正意义上的并行，同时拥有CPU时间片的只有一个当前协程，其它的协程处于挂起状态。不要觉得这样”协程”就没有意义，因为有另一类协程，当前需要的不是CPU而是IO。众所周知，CPU是很快的，而IO很慢，所以当一些协程都在挂起等待IO的时候，一些协程则在用CPU，在同一个线程中跑多个协程的就可以更充分地利用硬件资源，极大的提高服务的响应能力。不同于线程和进程由内核来调度并分配时间片，协程需要在代码层显式地控制与转换。&lt;/p&gt;
&lt;p&gt;eventlet又将协程称为绿色线程(GreenThread)。所谓的并发，就是创建多个greenthread,并对其进行管理，以实现非阻塞式的I/O …&lt;/p&gt;</summary><content type="html">&lt;p&gt;一直迷糊于操作系统的进程线程协程等概念及其切换，本文从基础开始梳理，旨在学习python的eventlet,及其在OpenStack中的应用。&lt;/p&gt;
&lt;h3&gt;一、简介&lt;/h3&gt;
&lt;p&gt;eventlet是一个python的并发网络库，采用&lt;code&gt;epoll/pool/select&lt;/code&gt;等异步 IO，并结合 greenlet 协程库实现并发。简单来说，eventlet是帮助实现并发的python库，不一定并行，但是也可以并行；在讲究高并发与分布式的今天，同步和阻塞就慢，异步和非阻塞就快。&lt;/p&gt;
&lt;p&gt;协程是一种运行在线程中的执行单位，同一个线程中可以同时运行多个协程，注意：该同时运行并不是真正意义上的并行，同时拥有CPU时间片的只有一个当前协程，其它的协程处于挂起状态。不要觉得这样”协程”就没有意义，因为有另一类协程，当前需要的不是CPU而是IO。众所周知，CPU是很快的，而IO很慢，所以当一些协程都在挂起等待IO的时候，一些协程则在用CPU，在同一个线程中跑多个协程的就可以更充分地利用硬件资源，极大的提高服务的响应能力。不同于线程和进程由内核来调度并分配时间片，协程需要在代码层显式地控制与转换。&lt;/p&gt;
&lt;p&gt;eventlet又将协程称为绿色线程(GreenThread)。所谓的并发，就是创建多个greenthread,并对其进行管理，以实现非阻塞式的I/O。&lt;/p&gt;
&lt;h3&gt;二、与操作系统相关的概念&lt;/h3&gt;
&lt;p&gt;理解eventlet前，需知道的操作系统相关基础，请移步：https://segmentfault.com/a/1190000003063859&lt;/p&gt;
&lt;h4&gt;协程与线程的区别&lt;/h4&gt;
&lt;p&gt;类似线程，协程也是一个执行序列，拥有自己独立的栈和局部变量，同时又与其他协程共享局部变量。他们的主要区别在于，一个具有多线程的程序可以同时运行几个线程，而同一时间内只能有一个协程在运行，无需考虑很多锁的问题。&lt;/p&gt;
&lt;p&gt;使用线程时，线程的执行完全由操作系统控制，进程调度会决定什么时候哪个线程应该占用CPU。而使用协程时，协程的执行顺序与时间完全由程序自己决定。协程可以自己主动让出CPU,因此任务的执行顺序可控，从而能最大可能的利用CPU的性能。&lt;/p&gt;
&lt;p&gt;协程的实现方式&lt;/p&gt;
&lt;p&gt;协程的实现主要是在协程休息时把当前的寄存器保存起来，然后重新工作时将其恢复。我们可以简单地将协程理解成一个线程内的伪并发方式。&lt;/p&gt;
&lt;h3&gt;三、GreenThread&lt;/h3&gt;
&lt;p&gt;eventlet通过实现了GreenThread类对greenlet进行了简单的封装。下面看官网上关于greenlet的一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;greenlet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;greenlet&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="n"&gt;gr2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;
    &lt;span class="n"&gt;gr1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;

&lt;span class="n"&gt;gr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gr1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该示例创建了两个协程 gr1 和 gr2 ,分别运行 test1 与 test2 两个函数，协程之间的切换使用 switch 方法。创建两个协程的主协程之后，切换到test1(),打印出12，然后又切换到test2()，打印出56，又切换回test1()，打印出34，然后执行权限重回主协程，由于之后主协程没有再切换给gr2执行，所以78没有被打印。这个过程始终只有一个协程在运行，函数的执行流由程序自己来控制，这很好的验证了协程运行顺序的可控性。&lt;/p&gt;
&lt;p&gt;但同样也验证了上述中已提到的，协程需要在代码层显式地控制与转换，是由应用程序来控制的，操作系统感知不到。而对于OpenStack这样的大项目来说，直接通过编写控制代码来切换的话可想而知不太可能。且python 2.x原生不支持协程，eventlet需要通过对标准库打patch实现协程。OpenStack对eventlet的使用同样如此。以Nova项目为例，在操作系统看来，nova-api只有一个线程，即主线程，该线程中又运行了很多协程，如果某一个协程被阻塞，应用程序也没有进行协程切换的话，便会阻塞该线程中的其他协程，大大影响并发效率。所以应用程序必须能够感知切换的时机，对于阻塞的场景，需要一种机制来触发切换该协程，运行其它的协程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EventletMonkey Patch&lt;/code&gt;可以动态地修改某些标准库，使得库里的阻塞函数被调用时触发切换，把CPU片段留给其它的协程。相关函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eventlet.patcher.monkey_patch(os=None, select=None, socket=None, thread=None, time=None, psycopg=None)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它可以修改如下8种module：&lt;/p&gt;
&lt;p&gt;os / select / socket / thread / time / psycopg / MySQLdb / builtins&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;usage：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;time module&lt;/code&gt;为例，传入&lt;code&gt;time=True&lt;/code&gt;表示&lt;code&gt;time module&lt;/code&gt;被打补丁[time.sleep is patched by eventlet.sleep]&lt;/p&gt;
&lt;p&gt;检查某个module是否已被monkey patch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eventlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_monkey_patched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eventlet 遇到如下场景时，会触发上下文切换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eventlet.sleep()&lt;/li&gt;
&lt;li&gt;上述被 monkey patch 的 module 的某些函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Nova中，eventlet被调用的入口在cmd/init.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;eventlet&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nova&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 禁用thread以开启远程调试&lt;/span&gt;
    &lt;span class="n"&gt;eventlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monkey_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;eventlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monkey_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下文继续分析eventlet常用的API，已经nova对eventlet的具体调用。&lt;/p&gt;
&lt;h3&gt;四、参考文档&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;http://greenlet.readthedocs.io/en/latest/&lt;/li&gt;
&lt;li&gt;http://eventlet.net/doc/basic_usage.html&lt;/li&gt;
&lt;li&gt;http://wsfdl.com/openstack/2014/09/29/Nova%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8Bmonkey_patch.html&lt;/li&gt;
&lt;li&gt;https://specs.openstack.org/openstack/openstack-specs/specs/eventlet-best-practices.html&lt;/li&gt;
&lt;li&gt;http://eventlet.net/doc/patching.html#monkeypatching-the-standard-library&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>Nova中定时任务解析</title><link href="https://andiaq.github.io/articles/periodic-task.html" rel="alternate"></link><published>2016-11-02T23:00:00+08:00</published><updated>2016-11-02T23:00:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-11-02:/articles/periodic-task.html</id><summary type="html">&lt;h3&gt;一、periodic_task&lt;/h3&gt;
&lt;h4&gt;1.1 what is periodic_task&lt;/h4&gt;
&lt;p&gt;在Nova中，nova-compute, nova-scheduler, nova-cell, network都有自己的周期性任务，通过nova的代码结构可以发现，它们都统一由各自模块下的manager.py中periodic_task管理。其中，periodic_task首先实现了一个装饰器，所有的周期性任务都是通过添加该装饰器实现，而周期性任务的启动伴随着每个服务的start也同步开始。&lt;/p&gt;
&lt;p&gt;首先装饰器实现如下(&lt;code&gt;oslo_service/periodic_task.py&lt;/code&gt;)，我们阅读后会发现，该方法主要定义了周期性任务（为True），以及周期性任务的名称，间隔时间（默认间隔时间是60s），运行方式等。实际上，此方法也只是定义了上述内容，添加了几个属性，并没有做其他的什么操作。由这些参数作为周期性任务的标记，保存到kwargs。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          &lt;span class="c1"&gt;# f为被装饰的函数&lt;/span&gt;
        &lt;span class="c1"&gt;# Test for old style invocation&lt;/span&gt;
        &lt;span class="k"&gt;if …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;一、periodic_task&lt;/h3&gt;
&lt;h4&gt;1.1 what is periodic_task&lt;/h4&gt;
&lt;p&gt;在Nova中，nova-compute, nova-scheduler, nova-cell, network都有自己的周期性任务，通过nova的代码结构可以发现，它们都统一由各自模块下的manager.py中periodic_task管理。其中，periodic_task首先实现了一个装饰器，所有的周期性任务都是通过添加该装饰器实现，而周期性任务的启动伴随着每个服务的start也同步开始。&lt;/p&gt;
&lt;p&gt;首先装饰器实现如下(&lt;code&gt;oslo_service/periodic_task.py&lt;/code&gt;)，我们阅读后会发现，该方法主要定义了周期性任务（为True），以及周期性任务的名称，间隔时间（默认间隔时间是60s），运行方式等。实际上，此方法也只是定义了上述内容，添加了几个属性，并没有做其他的什么操作。由这些参数作为周期性任务的标记，保存到kwargs。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          &lt;span class="c1"&gt;# f为被装饰的函数&lt;/span&gt;
        &lt;span class="c1"&gt;# Test for old style invocation&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ticks_between_runs&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;InvalidPeriodicTaskArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ticks_between_runs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Control if run at all&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;     
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_external_ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;external_process_ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;enabled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Control frequency&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spacing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 定义间隔时间&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_immediate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;run_immediately&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 定义运行方式&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_immediate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_last_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_last_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;1.2 why use periodic_task&lt;/h4&gt;
&lt;p&gt;在创建虚拟机时，时常会出现虚拟机一直处于创建过程中的某一个状态，比如在rebuild状态时，通过设置定时机制，可以设置超时时间，不至于一直处于某一个状态。另外，合理利用定时机制还可以实现资源在周期时间内被回收，同步电源状态，循环更新宿主机可用资源，循环删除迁移失败的虚机等等。在Nova中，周期性任务的实现大大增强了openstack虚拟机生命周期管理的可用性。&lt;/p&gt;
&lt;h4&gt;1.3 how to use periodic_task&lt;/h4&gt;
&lt;p&gt;周期性任务的真正实现首先由nova/service.py的start方法中被触发：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_dynamic_timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;initial_delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;initial_delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     
                                  &lt;span class="n"&gt;periodic_interval_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;           
                                     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;periodic_interval_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;其中，&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;periodic_tasks调用了nova&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py的periodic_tasks方法&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raise_on_error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Tasks to be run at a periodic interval.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raise_on_error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;raise_on_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;run_periodic_tasks()&lt;/code&gt;来自&lt;code&gt;oslo_service/periodic_task.py&lt;/code&gt;中的&lt;code&gt;PeriodicTasks&lt;/code&gt;类，该类的实现方式比较复杂，由&lt;code&gt;@six.add_metaclass(_PeriodicTasksMeta)&lt;/code&gt;装饰，即使用了 Python 中的 metaclass，即元类。这里简要说明下，我们可以把元类想象成一个类中类，或者是一个类，而它的实例也是一个类。也可以理解成，metaclass 的实例是类，而 class 的实例是一个类对象。metaclass 详解移步&lt;a href="http://jianpx.iteye.com/blog/908121"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面分析该元类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_PeriodicTasksMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# cls为将要被创建的类，names为类名，bases为基类，dict_为类的属性，是一个字典，保存类的方法&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Metaclass that allows us to collect decorated periodic tasks.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_PeriodicTasksMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dict_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 为类添加_periodic_tasks和_periodic_spacing两个类变量&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="c1"&gt;# 访问类的各个函数成员，如果成员中_periodic_task变量并且等于true，&lt;/span&gt;
        &lt;span class="c1"&gt;# 则将该函数成员收集到类的_periodic_tasks列表中，在for循环结束后，&lt;/span&gt;
        &lt;span class="c1"&gt;# 所有的周期性任务都会在该列表里面&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_periodic_task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_add_periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加周期性任务到_periodic_tasks中的方法实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add_periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add a periodic task to the list of periodic tasks.&lt;/span&gt;

&lt;span class="sd"&gt;    The task should already be decorated by @periodic_task.&lt;/span&gt;

&lt;span class="sd"&gt;    :return: whether task was actually enabled&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_name&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Skipping periodic task &lt;/span&gt;&lt;span class="si"&gt;%(task)s&lt;/span&gt;&lt;span class="s1"&gt; because &amp;#39;&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;its interval is negative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Skipping periodic task &lt;/span&gt;&lt;span class="si"&gt;%(task)s&lt;/span&gt;&lt;span class="s1"&gt; because &amp;#39;&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;it is disabled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# A periodic spacing of zero indicates that this task should&lt;/span&gt;
    &lt;span class="c1"&gt;# be run on the default interval to avoid running too&lt;/span&gt;
    &lt;span class="c1"&gt;# frequently.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_INTERVAL&lt;/span&gt;

    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由以上程序，便完成了所有周期性任务的收集，接着等待任务被调度。现在我们继续说&lt;code&gt;add_dynamic_timer&lt;/code&gt;方法(&lt;code&gt;oslo_service/loopingcall.py&lt;/code&gt;)。 其中&lt;code&gt;tg&lt;/code&gt;是线程组&lt;code&gt;threadgroup.ThreadGroup(threads)&lt;/code&gt; 的实例，主要用来管理定时器&lt;code&gt;Timer&lt;/code&gt;和&lt;code&gt;greenthreads&lt;/code&gt;。然后实例化了一个&lt;code&gt;DynamicLoopingCall&lt;/code&gt;对象&lt;code&gt;timer&lt;/code&gt;,循环调用&lt;code&gt;callback&lt;/code&gt;,此处的传入的&lt;code&gt;callback&lt;/code&gt;为&lt;code&gt;periodic_tasks.DynamicLoopingCall&lt;/code&gt;与普通的&lt;code&gt;LoopingCall&lt;/code&gt;不同之处在于，它在循环调用&lt;code&gt;callback&lt;/code&gt;时，两次调用之间的等待时间是动态决定的。 接着timer调用start方法，该方法会创建一个绿色线程，定时触发周期性任务被调度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_dynamic_timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;periodic_interval_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loopingcall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DynamicLoopingCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;initial_delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;periodic_interval_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;periodic_interval_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们回到manager.py,执行run_periodic_tasks方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raise_on_error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Tasks to be run at a periodic interval.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;idle_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_INTERVAL&lt;/span&gt;
    &lt;span class="c1"&gt;# 这里开始循环执行在上述元类_PeriodicTasksMeta中收集到的&lt;/span&gt;
    &lt;span class="c1"&gt;# 所有被deriodic_task装饰过的函数&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_external_ok&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; 
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_external_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;cls_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fully_qualified&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;full_task_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;cls_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_spacing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;last_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_last_run&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Check if due, if not skip&lt;/span&gt;
        &lt;span class="n"&gt;idle_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idle_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_run&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_run&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spacing&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;idle_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idle_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running periodic task &lt;/span&gt;&lt;span class="si"&gt;%(full_task_name)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;full_task_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;full_task_name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_periodic_last_run&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;task_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_nearest_boundary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;last_run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# 执行被装饰的函数&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;raise_on_error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;
            &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error during &lt;/span&gt;&lt;span class="si"&gt;%(full_task_name)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;full_task_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;full_task_name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;idle_for&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>rabbitmq code snippets</title><link href="https://andiaq.github.io/articles/rabbitmq-code-snippets.html" rel="alternate"></link><published>2016-10-11T12:00:00+08:00</published><updated>2016-10-11T12:00:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-10-11:/articles/rabbitmq-code-snippets.html</id><summary type="html">&lt;p&gt;RabbitMQ是一个支持多种通信协议的消息通信中间件，其核心原理即：接收和发送消息，是AMQP的典型应用。以下分模块列出与之相关的demo。&lt;/p&gt;
&lt;h3&gt;一、Hello World&lt;/h3&gt;
&lt;p&gt;以下实例实现了发送消息到一个已知队列中，并从该队列中接收消息。 send.py会发送一个消息到队列中，但是首先需要建立到RabbitMQ服务器的连接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                       &lt;span class="c1"&gt;#建立一个到RabbitMQ服务器的连接&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;#申明一个队列，消息将被发送到这个队列中&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;#exchange=&amp;#39;&amp;#39;表示使用默认的交换机，由该默认交换机来指定某条消息需要投递&lt;/span&gt;
&lt;span class="c1"&gt;#到哪个队列，routing_key指定队列的名称&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;RabbitMQ是一个支持多种通信协议的消息通信中间件，其核心原理即：接收和发送消息，是AMQP的典型应用。以下分模块列出与之相关的demo。&lt;/p&gt;
&lt;h3&gt;一、Hello World&lt;/h3&gt;
&lt;p&gt;以下实例实现了发送消息到一个已知队列中，并从该队列中接收消息。 send.py会发送一个消息到队列中，但是首先需要建立到RabbitMQ服务器的连接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                       &lt;span class="c1"&gt;#建立一个到RabbitMQ服务器的连接&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;#申明一个队列，消息将被发送到这个队列中&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;#exchange=&amp;#39;&amp;#39;表示使用默认的交换机，由该默认交换机来指定某条消息需要投递&lt;/span&gt;
&lt;span class="c1"&gt;#到哪个队列，routing_key指定队列的名称&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [x] Sent &amp;#39;Hello World!&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                   &lt;span class="c1"&gt;#在退出程序之前，我们需要确认网络缓冲已经被刷写、消息已经投递到RabbitMQ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;receive.py将会从队列中获取消息并将消息打印出来，前提仍然是需要先建立到RabbitMQ服务器的连接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;#使用queue_declare创建一个队列,即使多次运行这个命令但只有一个队列会被创建。因为我们                              &lt;/span&gt;
                                                     &lt;span class="c1"&gt;#并不确定哪个程序会首先运行。这种情况下，在程序中重复将队列重复声明一下是种值得推荐的做法&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          &lt;span class="c1"&gt;#该回调函数接收到的消息内容并输出到屏幕上&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [x] Received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;              
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                      &lt;span class="c1"&gt;#告诉RabbitMQ callback将从queue中接收消息&lt;/span&gt;
                      &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;#等待消息数据&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;二、工作队列&lt;/h3&gt;
&lt;p&gt;工作队列是为了避免等待一些占用大量资源、时间的操作。后台的工作者worker进程会将任务从队列中取出并处理。若运行多个了工作者，任务会在这些工作者之间共享。默认情况下， RabbitMQ采用的是轮询机制，会按照顺序把消息发送给每一个消费者，使得平均每个消费者接收到同等数量的消息。&lt;/p&gt;
&lt;h4&gt;2.1 轮询调度&lt;/h4&gt;
&lt;p&gt;以下实例通过发送字符串并在字符串之后加点号（.）来表示任务的复杂度，一个点号（.）将会耗时1秒钟。 &lt;/p&gt;
&lt;p&gt;1）new_task.py会按照计划发送任务到工作队列。在以上send.py的基础上，主要是重新定义了消息message，通过此message来模拟。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [x] Sent &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）worker.py实现了为消息体中每一个点号（.）模拟1秒钟操作。主要在receive.py的基础上添加修改了如下代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [x] Received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [x] Done&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以通过在多个终端上运行worker.py脚本，同时在一个终端上不断运行new_task.py string，观察结果。&lt;/p&gt;
&lt;h4&gt;2.2 消息确认&lt;/h4&gt;
&lt;p&gt;为了防止消息丢失，RabbitMQ提供了消息确认机制，工作者可以通过ack，通知RabbitMQ已经收到并处理了某条信息；若工作者挂掉，RabbitMQ会将任务发送给其他工作者；若工作者和消息断开连接，RabbitMQ会重新发送信息。该机制通过no_ack=True设置，默认情况下开启。&lt;/p&gt;
&lt;h4&gt;2.3 消息持久化&lt;/h4&gt;
&lt;p&gt;将“队列”和“消息”设为持久化，可以防止当RabbitMQ服务器崩溃时，丢失所有的队列和信息。该机制通过durable=True设置。需要在消息发送端的代码new_task.py中如下代码：&lt;/p&gt;
&lt;p&gt;1）设置队列持久化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;channel.queue_declare(queue=&amp;#39;task_queue&amp;#39;, durable=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）设置消息持久化&lt;/p&gt;
&lt;p&gt;在new_task.py中添加如下代码实现消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;channel.basic_publish(exchange=&amp;#39;&amp;#39;,
                      routing_key=&amp;quot;task_queue&amp;quot;,
                      body=message,
                      properties=pika.BasicProperties(
                         delivery_mode = 2,                     # 设置消息持久化
                      ))
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2.4 公平调度&lt;/h4&gt;
&lt;p&gt;公平调度实现了多个worker进程之间任务的均匀分配。 通过使用basic.qos方法，设置prefetch_count=1，告诉RabbitMQ在同一时刻，不要发送超过1条消息给某一个worker进程，直到该worker进程处理完了上一条消息并作出了响应。 在worker.py中添加如下代码实现公平调度：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;channel.basic_qos(prefetch_count=1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：当所有的worker处于繁忙状态时，消息队列会被填满，此时可以添加更多的worker或采用其他方式解决。&lt;/p&gt;
&lt;h3&gt;三、发布/订阅&lt;/h3&gt;
&lt;p&gt;前两部分都是将一个message发送给一个consumer，现在我们尝试将一个message发送给多个consumer（即broadcast）。每个consumer收到消息后都可以做不同的处理。例如接下来我们要做一个简单的logging system，productor发送一个log，一个receiver负责存在硬盘里，一个receiver负责显示在屏幕上。工作模型如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/publish.png"&gt;&lt;/p&gt;
&lt;p&gt;send.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 声明一个exchange,类型为fanout.&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fanout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;info: Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# 这里的exchange不再为空，而是指定为‘log’&lt;/span&gt;
&lt;span class="c1"&gt;# 这里的routing_key为空串，因为fanout型的exchange会忽略它&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] sent &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;receive.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python                                                      &lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fanout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 声明一个queue，这里不指明queue的名字，而是由系统随机生成，通常形如amq.xxx。&lt;/span&gt;
&lt;span class="c1"&gt;# 而exclusive设为True的意义是： once we disconnect the consumer the queue should be deleted&lt;/span&gt;
&lt;span class="c1"&gt;# 这样，无论什么时候我们需要一个空queue，都可以这样生成一个有随机名字的queue&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 获取队列的名字&lt;/span&gt;
&lt;span class="n"&gt;queue_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;

&lt;span class="c1"&gt;# 绑定queue和exchange，告诉exchange要把message路由到哪个queue&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] wait for logs.To exit press CTRL-c&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] receive &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行多个receiver端，可以看到它们是同时接收到message的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 将接收到的消息日志存入文件
python receive.py &amp;gt; log.txt
# 将接收到的消息日志显示在屏幕上
python receive.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;四、路由（直接匹配）&lt;/h3&gt;
&lt;p&gt;第三部分实现了exchange给与它绑定的所有queue广播消息，这里实现发送端指定接收的queue。原理很简单,将一个queue和一个exchange绑定时，可以指定一个路由键(binding key)。发送端发送消息时，设定相应的路由键(routing key)，这样，当message到达exchange时，就根据路由键，将message发送给相应的queue。这里继上一篇，发送端指定info、warning、error三种级别的信息，由exchange发送到不同的接收端。工作模型如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/direct-exchange.png"&gt;&lt;/p&gt;
&lt;h4&gt;4.1 绑定时指定路由键&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;channel.queue_bind(exchange=exchange_name,
                   queue=queue_name,
                   routing_key=&amp;#39;error&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.2 直接交换（Direct exchange）&lt;/h4&gt;
&lt;p&gt;exchange有四种类型，分别为direct,fanout,topic,headers。第三部分声明exchange时类型是fanout，fanout exchange会忽略路由键，而将message发送给每一个绑定了的队列，继而实现了广播的功能。为了给特定队列发送message，这里指定exchange的类型设定为direct。这样，exchange会将bind key 与 routing key 进行比较，若相同，则发送给相应的队列。若没有binding key 与routing key相同，则把message丢弃。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 绑定queue和exchange，指定类型为direct&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 发送message时，设定routing key&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.3 多重绑定&lt;/h4&gt;
&lt;p&gt;多个queue与exchange绑定时，可以有相同的binding key，这样，当一个routing key与这个binding key相同时，message会发送给相应的多个queue，实现类似组播的功能。效果如图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/direct-exchange-multiple.png"&gt;&lt;/p&gt;
&lt;p&gt;具体实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 设定一个direct exchange&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 发送三个不同routing key 的message&lt;/span&gt;
&lt;span class="n"&gt;routing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;routing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: hello wordol&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] sent &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相比前一节，改动主要有两点： 
1. 设定exchange的类型为direct 
2. 发送消息时指定routing_key&lt;/p&gt;
&lt;p&gt;receive.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python                                                      &lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queue_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
&lt;span class="c1"&gt;# 从命令行接收binding key参数，若没有，则设为error&lt;/span&gt;
&lt;span class="n"&gt;routings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;routings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;routings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;routings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;direct_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] wait for logs.To exit press CTRL-c&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] receive &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相比前一节，改动主要有两点： 
1. 设定exchange的类型为direct 
2. 从命令行接收binding key参数，从而在绑定时使用&lt;/p&gt;
&lt;h3&gt;五、主题交换机（模糊匹配）&lt;/h3&gt;
&lt;p&gt;由上可以看出，直连交换机可以有选择性的接收日志，但是无法基于多个标准执行路由操作。主题交换机的作用就是为了该目的来实现，大大提高了灵活性。 主题交换机的路由键是一个由.分隔开的词语列表，比如“a.b.c”, "a.d.e", "e.z.c"。 以下用图来说明： &lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="../images/topic_exchange.png"&gt;&lt;/p&gt;
&lt;p&gt;这三个绑定键被可以总结为： Q1 对所有的桔黄色动物都感兴趣。 Q2 则是对所有的兔子和所有懒惰的动物感兴趣。 两个通配符： '': 匹配前一个字符一次或多次 '#': 匹配前一个字符0次或多次 例： a. ，匹配的有a., a.b等等 a.#，匹配的有a,a., a.b....&lt;/p&gt;
&lt;p&gt;emit_log_topic.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;routing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anonymous.info&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;#设置路由键&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Sent &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;receive_logs_topic.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="c1"&gt;#随机生成队列&lt;/span&gt;
&lt;span class="n"&gt;queue_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;

&lt;span class="n"&gt;binding_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;binding_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [binding_key]...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;binding_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;binding_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                       &lt;span class="c1"&gt;#获取绑定键，将绑定键和路由键做匹配，进行选择接受的日志类型&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;binding_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; [*] Waiting for logs. To exit press CTRL+C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;观察到运行结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shell1 $ ./emit_log_topic.py &amp;quot;kern.critical&amp;quot; &amp;quot;A critical kernel error&amp;quot;
 [x] Sent &amp;#39;&amp;#39;:&amp;#39;A critical kernel error&amp;#39;


shell2 $ ./receive_logs_topic.py &amp;quot;#&amp;quot;                             #接收所有日志信息
 [*] Waiting for logs. To exit press CTRL+C
 [x] &amp;#39;kern.critical&amp;#39;:&amp;#39;A critical kernel error&amp;#39;


shell3 $ ./receive_logs_topic.py &amp;quot;kern.*&amp;quot;                        #接收所有来自内核的日志信息
 [*] Waiting for logs. To exit press CTRL+C
 [x] &amp;#39;kern.critical&amp;#39;:&amp;#39;A critical kernel error&amp;#39;

shell4 $ ./receive_logs_topic.py &amp;quot;*.error&amp;quot;                        #接收所有的错误信息
 [*] Waiting for logs. To exit press CTRL+C
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明: 
1. binding key 设置为'#'时，topic exchange 和 fanout exchange的效果一样，相应的queue能接收到每一个message。 
2. binding key 里没有'*'或‘#’时， topic exchange 和 direct exchange的效果一样。&lt;/p&gt;
&lt;h3&gt;六、远程过程调用&lt;/h3&gt;
&lt;p&gt;将一个函数运行在远程计算机上并且等待从那儿获得结果，这种模式被称为远程过程调用RPC。 以下实例模拟RPC服务来返回斐波那契数列。 服务器端代码：&lt;/p&gt;
&lt;p&gt;rpc_server.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5672&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;               &lt;span class="c1"&gt;#建立到RabbitMQ服务器的连接&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                  &lt;span class="c1"&gt;#建立通道&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rpc_queue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="c1"&gt;#申明消息队列&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                     &lt;span class="c1"&gt;#定义斐波那契函数&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                           &lt;span class="c1"&gt;#为basic_consume声明一个回调函数，执行实际的操作并且做出响应&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[.] fib(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;#reply_to（回复目标）：用来命名回调队列&lt;/span&gt;
                    &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;correlation_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correlation_id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                 &lt;span class="c1"&gt;#correlation_id（关联标识）：将RPC的响应和请求关联起来&lt;/span&gt;
                    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                                               
    &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;#这是上面提到过得消息确认机制&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_qos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefetch_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="c1"&gt;#实现公平调度机制&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rpc_queue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x] Awaiting RPC requests&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;客户端代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FibonacciRpcClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;#声明匿名独享的回调队列&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;#订阅上面声明的回调队列，以便接收RPC的响应&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correlation_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                               &lt;span class="c1"&gt;#检查每一个响应消息的correlation_id是否与我们期待的一致&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;                                               &lt;span class="c1"&gt;#若correlation_id一致，则将响应结果赋值给self.response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                             &lt;span class="c1"&gt;#执行RPC请求&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;           &lt;span class="c1"&gt;#生成一个唯一的correlation_id，并将其保存起来&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                &lt;span class="c1"&gt;#将带有reply_to和correlation_id属性的消息发布出去&lt;/span&gt;
                                   &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rpc_queue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                                   &lt;span class="n"&gt;correlation_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr_id&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                                                                   &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_data_events&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        

&lt;span class="n"&gt;fibonacci_rpc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FibonacciRpcClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;              &lt;span class="c1"&gt;#发送RPC请求&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Requesting fib(30)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibonacci_rpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [.] Got &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;#接收响应的结果并打印&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;七、总结&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image" src="../images/rpc.png"&gt;&lt;/p&gt;
&lt;p&gt;RPC的工作机制如下： &lt;/p&gt;
&lt;p&gt;客户端启动时，会创建一个匿名独享的回调队列； 在RPC请求中，客户端通过basic_publish发送带有两个属性的消息：一个是设置回调队列的 reply_to属性，另一个是设置唯一值的 correlation_id 属性； 以上请求会发送到rpc_queue队列中； RPC服务器端会等待请求发送到这个队列中。当请求出现时，服务器端执行他的工作并将带有执行结果的消息发送给reply_to字段指定的队列； 客户端等待回调队列里的数据，当消息出现时，它会检查correlation_id属性，若此属性值与请求匹配，就将其返回给应用。&lt;/p&gt;
&lt;h3&gt;八、参考文档&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;http://www.rabbitmq.com/tutorials/tutorial-one-python.html&lt;/li&gt;
&lt;li&gt;http://rabbitmq.mr-ping.com/&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>qemu-guest-agent</title><link href="https://andiaq.github.io/articles/qemu-guest-agent.html" rel="alternate"></link><published>2016-10-09T14:14:00+08:00</published><updated>2016-10-09T14:14:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-10-09:/articles/qemu-guest-agent.html</id><summary type="html">&lt;h3&gt;一、背景&lt;/h3&gt;
&lt;p&gt;最近在OpenStack环境中分析给虚拟机打快照的过程。发现OpenStack默认打快照的方式是cold snapshot，在打快照的过程中，要么会把虚拟机关机（save状态），要么会将实例的文件系统静默。具体的情况下次解析。此文主要分析rbd做后端存储时使用qemu-guest-agent来静默文件系统。&lt;/p&gt;
&lt;h3&gt;二、简介&lt;/h3&gt;
&lt;p&gt;在KVM系统中，qemu-guest-agent（即qga）是一个运行在虚拟机内部的常驻进程。其功能类似vmware-tools，即实现宿主机和虚拟机的通信，这种方式不依赖于网络，而是依赖于virtio-serial（默认首选方式）或者isa-serial。OpenStack中，QEMU则提供了串口设备的模拟及数据交换的channel，最终呈现出来的是一个虚拟机内部的串口设备和宿主机上对应该虚拟机的unix socket文件。qga则通过读写串口设备和socket进行通信，通信协议为QMP（QEMU Machine Protocol）。QMP是一种基于json格式的传输协议，我们能利用它与从外部控制QEMU虚拟机实例，例如查询，更改虚拟机的状态，获取设备信息等等。&lt;/p&gt;
&lt;h3&gt;三、使用方式&lt;/h3&gt;
&lt;h4&gt;3.1 前提条件&lt;/h4&gt;
&lt;p&gt;1） 使用ceph做后端存储时，为了实现Nova、Glance、Cinder统一存储快速创建虚拟机，必须使用raw格式的镜像，如果使用qcow2会导致创建虚拟机过程很慢（Nova会先下载镜像后台转成raw格式再启动 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;一、背景&lt;/h3&gt;
&lt;p&gt;最近在OpenStack环境中分析给虚拟机打快照的过程。发现OpenStack默认打快照的方式是cold snapshot，在打快照的过程中，要么会把虚拟机关机（save状态），要么会将实例的文件系统静默。具体的情况下次解析。此文主要分析rbd做后端存储时使用qemu-guest-agent来静默文件系统。&lt;/p&gt;
&lt;h3&gt;二、简介&lt;/h3&gt;
&lt;p&gt;在KVM系统中，qemu-guest-agent（即qga）是一个运行在虚拟机内部的常驻进程。其功能类似vmware-tools，即实现宿主机和虚拟机的通信，这种方式不依赖于网络，而是依赖于virtio-serial（默认首选方式）或者isa-serial。OpenStack中，QEMU则提供了串口设备的模拟及数据交换的channel，最终呈现出来的是一个虚拟机内部的串口设备和宿主机上对应该虚拟机的unix socket文件。qga则通过读写串口设备和socket进行通信，通信协议为QMP（QEMU Machine Protocol）。QMP是一种基于json格式的传输协议，我们能利用它与从外部控制QEMU虚拟机实例，例如查询，更改虚拟机的状态，获取设备信息等等。&lt;/p&gt;
&lt;h3&gt;三、使用方式&lt;/h3&gt;
&lt;h4&gt;3.1 前提条件&lt;/h4&gt;
&lt;p&gt;1） 使用ceph做后端存储时，为了实现Nova、Glance、Cinder统一存储快速创建虚拟机，必须使用raw格式的镜像，如果使用qcow2会导致创建虚拟机过程很慢（Nova会先下载镜像后台转成raw格式再启动）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu-img convert -f qcow2 -O raw cirros-0.3.4-x86_64-disk.img
cirros-0.3.4-x86_64-disk.raw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）通过OpenStack创建虚拟机时，首先要满足选择的镜像属性hw_qemu_guest_agent=yes：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;glance image-update --property hw_qemu_guest_agent=yes $image_id
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3）创建虚拟机。&lt;/p&gt;
&lt;p&gt;3.2 配置过程
1）启动虚拟机，在虚拟机中安装qemu-guest-agent（以CentOS 6.X为例）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install qemu-agent-agent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2）安装qga后，修改/etc/sysdonfig/qemu-ga文件：&lt;/p&gt;
&lt;p&gt;改动部分如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置 FSFREEZE_HOOK_ENABLE=1
注释 # BLACKLIST_RPC=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3）查看&lt;code&gt;/var/lib/nova/instances/${instance_uuid}/libvirt.xml&lt;/code&gt;文件的以下设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;channel&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unix&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bind&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/var/lib/libvirt/qemu/org.qemu.guest_agent.0.instance-0000066a.sock&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;virtio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.qemu.guest_agent.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;org.qemu.guest_agent.0.instance-0000066a.sock&lt;/code&gt;是宿主机中对应该虚拟机的unit socket文件，&lt;code&gt;org.qemu.guest_agent.0&lt;/code&gt;是虚拟机内部的串口设备。由此组成一个通道的两端。qga时刻监听这个unix socket，一旦发现有指令发来，便分析该指令并执行，通过unix socket返回执行结果。&lt;/p&gt;
&lt;h4&gt;3.3 执行操作&lt;/h4&gt;
&lt;p&gt;查看虚拟机：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virsh list
 Id    Name                           State
 ------------------------------------------------
 &lt;span class="m"&gt;3&lt;/span&gt;     instance-00000662              running
 &lt;span class="m"&gt;5&lt;/span&gt;     instance-0000066a              running
 &lt;span class="sb"&gt;```&lt;/span&gt;
获取虚拟机的信息：
&lt;span class="sb"&gt;```&lt;/span&gt;bash
&lt;span class="o"&gt;[&lt;/span&gt;root@server-68.103.hatest.ustack.in qemu &lt;span class="o"&gt;]&lt;/span&gt;$ virsh qemu-agent-command &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-info&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1.2.1&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;supported_commands&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-network-get-interfaces&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-suspend-hybrid&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-suspend-ram&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-suspend-disk&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-fstrim&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-fsfreeze-thaw&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-fsfreeze-freeze&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-fsfreeze-status&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-flush&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-seek&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-write&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-read&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-close&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-file-open&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-shutdown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-info&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-ping&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-sync&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;:true,&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;guest-sync-delimited&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}]}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上执行结果显示了该虚拟机支持("enabled":true)的所有功能。&lt;/p&gt;
&lt;p&gt;feeeze文件系统的用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 冻结虚拟机的文件系统，domain可以是domain name, id or uuid&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server-68.103.hatest.ustack.in qemu &lt;span class="o"&gt;]&lt;/span&gt;$ virsh qemu-agent-command &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-freeze&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;:1&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# 查看文件系统冻结后的状态为frozen&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server-68.103.hatest.ustack.in qemu &lt;span class="o"&gt;]&lt;/span&gt;$ virsh qemu-agent-command &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-status&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;frozen&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# 解冻文件系统&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server-68.103.hatest.ustack.in qemu &lt;span class="o"&gt;]&lt;/span&gt;$ virsh qemu-agent-command &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-thaw&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;:1&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# 查看文件系统解冻后的状态为thawed&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server-68.103.hatest.ustack.in qemu &lt;span class="o"&gt;]&lt;/span&gt;$ virsh qemu-agent-command &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-status&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;thawed&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;四、OpenStack中打快照&lt;/h4&gt;
&lt;p&gt;OpenStack中静默文件系统时，会进入如下方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_quiesced&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quiesced&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_can_quiesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;guest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_guest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# TODO(sahid): We are converting all calls from a&lt;/span&gt;
        &lt;span class="c1"&gt;# virDomain object to use nova.virt.libvirt.Guest.&lt;/span&gt;
        &lt;span class="c1"&gt;# We should be able to remove domain at the end.&lt;/span&gt;
        &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;guest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_domain&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quiesced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# 调用libvirt库函数，冻结文件系统，类似执行virsh qemu-agent-command 5 &amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-freeze&amp;quot;}&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fsFreeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# 调用libvirt库函数，解封文件系统，类似执行virsh qemu-agent-command 5 &amp;#39;{&amp;quot;execute&amp;quot;:&amp;quot;guest-fsfreeze-thaw&amp;quot;}&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fsThaw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;libvirtError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_error_code&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error from libvirt while quiescing &lt;/span&gt;&lt;span class="si"&gt;%(instance_name)s&lt;/span&gt;&lt;span class="s1"&gt;: &amp;#39;&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;[Error Code &lt;/span&gt;&lt;span class="si"&gt;%(error_code)s&lt;/span&gt;&lt;span class="s1"&gt;] &lt;/span&gt;&lt;span class="si"&gt;%(ex)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s1"&gt;&amp;#39;error_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NovaException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;五、参考文档&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;http://docs.ceph.org.cn/rbd/rbd-snapshot/&lt;/li&gt;
&lt;li&gt;http://wiki.libvirt.org/page/Qemu_guest_agent&lt;/li&gt;
&lt;li&gt;http://www.wtoutiao.com/p/186Gewv.html&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>make rpm package</title><link href="https://andiaq.github.io/articles/make-rpm-package.html" rel="alternate"></link><published>2016-10-07T14:48:00+08:00</published><updated>2016-10-07T14:48:00+08:00</updated><author><name>Yuwei Wang</name></author><id>tag:andiaq.github.io,2016-10-07:/articles/make-rpm-package.html</id><summary type="html">&lt;p&gt;近一个两月和同事们一起开发了一个关于虚拟机HA的项目rock。目前正在着手将该项目由Puppet管理，所以需要将rock打包成rpm格式。以下记录了RPM打包的过程。&lt;/p&gt;
&lt;h3&gt;一、简介&lt;/h3&gt;
&lt;p&gt;RPM(RedHat Package Manager)是RedHat的软件包管理器。通过rpm可以在软件安装的过程中就把相关的依赖一起部署完毕，此外，rpm还有数据库协助软件升级、文件校验等，结合yum升级方式，选择rpm打包是很好的一种方法。&lt;/p&gt;
&lt;h3&gt;二、RPM常用命令&lt;/h3&gt;
&lt;p&gt;常用命令组合：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;ivh&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;安装显示安装进度&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uvh&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;升级软件包&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qpl&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;列出&lt;/span&gt;&lt;span class="n"&gt;RPM软件包内的文件信息&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qpi&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;列出&lt;/span&gt;&lt;span class="n"&gt;RPM软件包的描述信息&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qf&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;查找指定文件属于哪个&lt;/span&gt;&lt;span class="n"&gt;RPM软件包&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;Va&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;校验所有的&lt;/span&gt;&lt;span class="n"&gt;RPM软件包 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;近一个两月和同事们一起开发了一个关于虚拟机HA的项目rock。目前正在着手将该项目由Puppet管理，所以需要将rock打包成rpm格式。以下记录了RPM打包的过程。&lt;/p&gt;
&lt;h3&gt;一、简介&lt;/h3&gt;
&lt;p&gt;RPM(RedHat Package Manager)是RedHat的软件包管理器。通过rpm可以在软件安装的过程中就把相关的依赖一起部署完毕，此外，rpm还有数据库协助软件升级、文件校验等，结合yum升级方式，选择rpm打包是很好的一种方法。&lt;/p&gt;
&lt;h3&gt;二、RPM常用命令&lt;/h3&gt;
&lt;p&gt;常用命令组合：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;ivh&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;安装显示安装进度&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Uvh&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;升级软件包&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qpl&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;列出&lt;/span&gt;&lt;span class="n"&gt;RPM软件包内的文件信息&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qpi&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;列出&lt;/span&gt;&lt;span class="n"&gt;RPM软件包的描述信息&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;qf&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;查找指定文件属于哪个&lt;/span&gt;&lt;span class="n"&gt;RPM软件包&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;Va&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;校验所有的&lt;/span&gt;&lt;span class="n"&gt;RPM软件包&lt;/span&gt;&lt;span class="err"&gt;，查找丢失的文件&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;Lost&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;删除包&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多命令可以通过man rpm查询。&lt;/p&gt;
&lt;h3&gt;三、打包过程&lt;/h3&gt;
&lt;h4&gt;3.1 准备操作&lt;/h4&gt;
&lt;p&gt;在创建RPM包之前，需要先安装一些必须的开发工具：&lt;/p&gt;
&lt;p&gt;安装打包套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install rpmdevtools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建议使用临时用户来创建RPM包，若打包发生了错误，构建程序不会破坏系统。&lt;/p&gt;
&lt;p&gt;使用临时用户登陆，在家目录下，创建标准的打包目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rpmdev-setuptree
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该操作会在家目录下生成rpmbuild目录，同时该目录下存在如下目录：
- BUILT
- RPMS
- SOURCES
- SPECS
- SRAMS&lt;/p&gt;
&lt;p&gt;其中，SOURCES目录中存放的是源文件的压缩包（一般是tar.gz格式）以及其所需要的配置文件和patch等。BUILD目录存放build阶段解压的源文件压缩包。SPECS目录存放的是spec文件，打包的关键就是对该spec文件的编写。之后通过对该spec文件执行rpmbuild操作进行打包，最终生成的二进制RPM包存放于RPMS，源文件RPM包存放于SRAMS。&lt;/p&gt;
&lt;p&gt;同时在install阶段，为保证非root用户能打包，引入了BuildRoot，整个安装过程会在该目录发生。再根据spec文件中的%files指定打包需要哪些文件（从BUILDROOT的相应路径找到文件）。&lt;/p&gt;
&lt;p&gt;以上准备工作完成。现在需要编写spec文件。&lt;/p&gt;
&lt;h4&gt;3.2 编写spec文件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; rpmbuild/SPECS
$ vim test.spec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以通过以下命令快速生成一个模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rpmdev-newspec test.spec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下通过test.spec模板进行解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;该软件包的名称，如&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;可通过宏&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;%name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;来引用&lt;/span&gt;
    &lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;版本信息&lt;/span&gt;
    &lt;span class="nl"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;                   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rpm包的发行号&lt;/span&gt;
    &lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;软件包简介&lt;/span&gt;
    &lt;span class="nl"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;软件类型&lt;/span&gt;
    &lt;span class="nl"&gt;License&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;软件包的版权规则&lt;/span&gt;
    &lt;span class="nl"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;软件地址&lt;/span&gt;
    &lt;span class="nl"&gt;Source0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;源文件包，通常为&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
    &lt;span class="nl"&gt;BuildRoot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_tmppath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__id_u&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="n"&gt;BuildRequires&lt;/span&gt;
    &lt;span class="nl"&gt;Requires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="nf"&gt;%description&lt;/span&gt;                            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;软件包的详细描述信息&lt;/span&gt;

    &lt;span class="nf"&gt;%prep&lt;/span&gt;                                   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;打包前的准备操作&lt;/span&gt;
    &lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;         &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;解压源码包到&lt;/span&gt;&lt;span class="n"&gt;BUILD目录下&lt;/span&gt;

    &lt;span class="nf"&gt;%build&lt;/span&gt;                                  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;构建阶段&lt;/span&gt;
    &lt;span class="nf"&gt;%configure&lt;/span&gt;
    &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;_smp_mflags&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;%install&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;安装阶段&lt;/span&gt;
    &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;DESTDIR&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;%clean&lt;/span&gt;                                  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;清理临时文件&lt;/span&gt;
    &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;%files&lt;/span&gt;                                  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;定义放入&lt;/span&gt;&lt;span class="n"&gt;rpm包中的文件和目录&lt;/span&gt;
    &lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;%doc&lt;/span&gt;

    &lt;span class="nf"&gt;%changelog&lt;/span&gt;                              &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;日志变更信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;部分具体说明如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%group：可在/usr/share/doc/rpm-x.x.x/GROUPS中查看Group的一个列表。&lt;/li&gt;
&lt;li&gt;%BuildRoot：构建包时的安装目录。BUILD目录即%{_builddir}，编译是在BUILD目录中进行的，当编译完成后，将打包需要的文件从BUILD目录复制到BuildRoot目录，然后在BuildRoot目录进行安装，若设置BuildRoot为/usr/local，可用$RPM_BUILD_ROOT或%{buildroot}访问它，值为rpmbuild/BUILDROOT/usr/local。除了在spec文件中设置BuildRoot外，还可以在rpmrc文件或在rpmbuild命令使用--buildroot来设置BuildRoot。&lt;/li&gt;
&lt;li&gt;%BuildRequires：编译该软件包所需的依赖包列表，以逗号分隔。编译依赖不会自动判断，所以需要列出编译所需的所有依赖包。常见的软件包可省略，例如 gcc。&lt;/li&gt;
&lt;li&gt;%Requires：安装该软件所需的依赖包列表。BuildRequires 标签是编译所需的依赖，而 Requires 标签是安装/运行程序所需的依赖。大多数情况下，rpmbuild 会自动探测依赖，所以可能不需要 Requires 标签。然而，你也可以明确标明需要哪些软件包，或由于未自动探测所需依赖而需要手动标明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多详细信息可以&lt;a href="https://fedoraproject.org/wiki/How_to_create_an_RPM_package/zh-cn#SPEC_.E6.96.87.E4.BB.B6.E7.BB.BC.E8.BF.B0"&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;h4&gt;3.3 打包时的具体问题&lt;/h4&gt;
&lt;p&gt;一、在编写spec文件时，使用到很多RPM宏命令，这些宏命令的定义可在&lt;code&gt;/usr/lib/rpm/macros&lt;/code&gt;中查看。以下列出我所用到的宏命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;宏命令&lt;/th&gt;
&lt;th&gt;路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td __python&gt;%&lt;/td&gt;
&lt;td&gt;/usr/bin/python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _prefix&gt;%&lt;/td&gt;
&lt;td&gt;/usr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _sysconfdir&gt;%&lt;/td&gt;
&lt;td&gt;/etc/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _unitdir&gt;%&lt;/td&gt;
&lt;td&gt;/usr/lib/systemd/system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _python_sitelib&gt;%&lt;/td&gt;
&lt;td&gt;/usr/lib/python2.7/site-packages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _localstatedir&gt;%&lt;/td&gt;
&lt;td&gt;/var&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td _bindir&gt;%&lt;/td&gt;
&lt;td&gt;/usr/bin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上宏命令所对应的路径都可以通过&lt;code&gt;rpm --eval %{macro}&lt;/code&gt;查看。&lt;/p&gt;
&lt;p&gt;二、下面以rock.spec为例，分步解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%prep&lt;/code&gt;字段，对源文件压缩包解压。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%prep&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%build&lt;/code&gt;字段，构建压缩包。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%build&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__python&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;%install字段，安装软件包到BUILDROOT目录。需注意的是，这里rock依赖了keeplived，需修改keepalived.conf文件，但是keepalived同样可能会被其他软件所使用，所以我们只管安装自己项目所需的文件，这里在安装之前，先把编译到BUILDROOT下的keeplived.conf删除后再进行下面的操作的。其次，在安装下面的配置文件时，注意赋予的权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%install&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__python&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# Remove keepalived dependency&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keepalived&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keepalived&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;

&lt;span class="cp"&gt;# Setup directories&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;755&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_localstatedir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;

&lt;span class="cp"&gt;# Install config files&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;host_down&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="cp"&gt;# Install systemd units&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;644&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;644&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;

&lt;span class="cp"&gt;# Install init scripts&lt;/span&gt;
&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;544&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOURCE7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;buildroot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;%files字段。起初我不是那么明白该字段该如何填写，所以故意编译让其报错，根据提示的错误在这里一一添加的内容，包括需创建的目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%files&lt;/span&gt;
&lt;span class="nf"&gt;%defattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manage&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_bindir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ha_status&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;is_normal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kill_engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kill_mon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;python_sitelib&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;python_sitelib&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;

&lt;span class="nf"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noreplace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;alembic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_sysconfdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;host_down&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;
&lt;span class="nf"&gt;%config&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_unitdir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;

&lt;span class="nf"&gt;%dir&lt;/span&gt; &lt;span class="nf"&gt;%attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0755&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_localstatedir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;%changelog字段，填写变更的日志信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%changelog&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Tue&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="n"&gt;Yuwei&lt;/span&gt; &lt;span class="n"&gt;Wang&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;wangyuwei&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;unitedstack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.0.1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;rock&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;deployment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三、编写完rock.spec后，开始打包。rpm命令可以指定不同的参数，分步进行打包，可以检测在打包过程中遇到的具体问题。以下是从spec文档打包时rpmbuild相关的命令。&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpmbuild [options] [spec文档]
命令options:

-bp  #只执行spec的%pre 段(解开源码包并打补丁，即只做准备)
-bc  #执行spec的%pre和%build 段(准备并编译)
-bi  #执行spec中%pre，%build与%install(准备，编译并安装)
-bl  #检查spec中的%file段(查看文件是否齐全)
-ba  #建立源码与二进制包(常用)
-bb  #只建立二进制包(常用)
-bs  #只建立源码包
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若执行&lt;code&gt;rpmbuild -ba test.spec&lt;/code&gt;没有报错，则大体算是打包成功，具体是否可用还需进行检查，遇到问题再修改其中的小细节。打包完后可去rpmbuild/RPMS目录中查看二进制包。&lt;/p&gt;
&lt;h3&gt;四、创建本地仓库&lt;/h3&gt;
&lt;p&gt;这里将rock所依赖的所有rpm包包括rock本身的rpm包放置一块创建一个本地仓库，就可以直接通过yum install rock命令安装rock包括其所有的依赖，这样通过yum安装起来会更加方便。以下简单说明创建本地仓库的步骤。&lt;/p&gt;
&lt;h4&gt;4.1 创建本地yum仓库&lt;/h4&gt;
&lt;p&gt;依赖的相关软件包可通过yum install *** --downloadonly --downloaddir=/yum/local命令下载到/yum/local下而不安装。也可以通过其他方式比如cp。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p /yum/local &lt;span class="c1"&gt;#可以有N级目录  &lt;/span&gt;
$ cp ... &lt;span class="c1"&gt;#复制RPM包到上述目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.2 创建repo文件&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat&amp;gt;&amp;gt;/etc/yum.repos.d/CentOS-Local.repo&lt;span class="s"&gt;&amp;lt;&amp;lt;-EOF  &lt;/span&gt;
&lt;span class="s"&gt;[Local]  &lt;/span&gt;
&lt;span class="s"&gt;name=Local Yum  &lt;/span&gt;
&lt;span class="s"&gt;baseurl=file:///yum/  &lt;/span&gt;
&lt;span class="s"&gt;gpgcheck=1  &lt;/span&gt;
&lt;span class="s"&gt;gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KE&lt;/span&gt;Y-CentOS-7  
&lt;span class="nv"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.3 安装createrepo&lt;/h4&gt;
&lt;p&gt;以下是两种安装方式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install createrepo &lt;span class="c1"&gt;#使用yum安装createrepo  &lt;/span&gt;
$ rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/createrepo-0.9.9-23.el7.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;4.4 创建索引&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ createrepo /yum   
$ yum makecache &lt;span class="c1"&gt;#更新缓存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>